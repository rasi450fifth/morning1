{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Personal Morning Dashboard\n\n## Overview\n\nThis is a personal morning dashboard web application built as a React single-page application with an Express.js backend. The dashboard provides a comprehensive morning routine experience featuring educational content, habit tracking, weather information, prayer times, news updates, and various learning modules including French language lessons, science facts, historical knowledge, and interactive challenges. The application uses a modern Apple-inspired design with clean typography and responsive layouts optimized for both desktop and mobile devices.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **UI Components**: Radix UI primitives with shadcn/ui component library for consistent design\n- **Styling**: Tailwind CSS with custom CSS variables for theming and Apple-inspired design\n- **State Management**: React hooks with custom localStorage hooks for data persistence\n- **Data Fetching**: TanStack React Query for server state management and caching\n- **Routing**: Wouter for lightweight client-side routing\n\n### Backend Architecture\n- **Framework**: Express.js with TypeScript running on Node.js\n- **API Design**: RESTful API endpoints for weather, prayer times, and news data\n- **Development Server**: Custom Vite integration for hot module replacement in development\n- **Error Handling**: Centralized error handling middleware with structured error responses\n\n### Data Storage Solutions\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Client Storage**: localStorage for persisting user preferences, habits, and goals\n- **Session Management**: In-memory storage for development with extensible interface for production\n\n### Authentication and Authorization\n- **User Management**: Basic user schema with username/password authentication\n- **Session Storage**: Configurable storage interface supporting both memory and database sessions\n- **Security**: Password hashing and session-based authentication ready for implementation\n\n### External Dependencies\n- **Weather API**: OpenWeatherMap integration for current conditions and forecasts\n- **Prayer Times**: Aladhan API or similar for Islamic prayer time calculations\n- **News Services**: BBC RSS feeds or News API for current events (international, US, business)\n- **Database Provider**: Neon Database (PostgreSQL) for cloud database hosting\n- **Styling**: Google Fonts integration for typography (DM Sans, Geist Mono, Fira Code)\n- **Development Tools**: Replit-specific development enhancements and error overlay","size_bytes":2705},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Weather API endpoint\n  app.get('/api/weather', async (req, res) => {\n    try {\n      const location = req.query.location as string || 'Vienna,VA,US';\n      const apiKey = process.env.OPENWEATHER_API_KEY || process.env.WEATHER_API_KEY;\n      \n      if (!apiKey) {\n        return res.status(500).json({ \n          error: 'Weather API key not configured',\n          message: 'Please set OPENWEATHER_API_KEY environment variable' \n        });\n      }\n\n      const response = await fetch(\n        `https://api.openweathermap.org/data/2.5/weather?q=${location}&appid=${apiKey}&units=imperial`\n      );\n      \n      if (!response.ok) {\n        throw new Error(`Weather API error: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      \n      // Get forecast data\n      const forecastResponse = await fetch(\n        `https://api.openweathermap.org/data/2.5/forecast?q=${location}&appid=${apiKey}&units=imperial`\n      );\n      \n      const forecastData = forecastResponse.ok ? await forecastResponse.json() : null;\n      \n      // Process forecast data for detailed timing information\n      let tomorrowData = null;\n      const now = new Date();\n      const currentHour = now.getHours();\n      \n      // More realistic timing based on typical weather patterns\n      let todayHighTime = currentHour < 14 ? '2:00 PM' : '3:00 PM';\n      let todayLowTime = currentHour < 6 ? '6:00 AM' : '5:00 AM';\n      let todayHumidityHighTime = currentHour < 6 ? '6:00 AM' : '7:00 AM';\n      let todayHumidityLowTime = currentHour < 15 ? '3:00 PM' : '2:00 PM';\n      let todayWindHighTime = currentHour < 15 ? '3:00 PM' : '4:00 PM';\n      \n      if (forecastData && forecastData.list) {\n        // Find tomorrow's data (24 hours ahead)\n        const tomorrow = forecastData.list.find((item: any) => {\n          const itemDate = new Date(item.dt * 1000);\n          const now = new Date();\n          const timeDiff = itemDate.getTime() - now.getTime();\n          return timeDiff >= 20 * 60 * 60 * 1000 && timeDiff <= 28 * 60 * 60 * 1000; // 20-28 hours ahead\n        });\n        \n        if (tomorrow) {\n          tomorrowData = {\n            name: 'Tomorrow',\n            temp: Math.round(tomorrow.main.temp),\n            high: Math.round(tomorrow.main.temp_max),\n            low: Math.round(tomorrow.main.temp_min),\n            humidity: tomorrow.main.humidity,\n            windSpeed: Math.round(tomorrow.wind?.speed || 0),\n            windDirection: tomorrow.wind?.deg || 0,\n            icon: tomorrow.weather[0].icon,\n            highTime: new Date(tomorrow.dt * 1000).toLocaleTimeString('en-US', { hour: 'numeric' }),\n            lowTime: new Date(tomorrow.dt * 1000 - 6 * 60 * 60 * 1000).toLocaleTimeString('en-US', { hour: 'numeric' }),\n            humidityHighTime: new Date(tomorrow.dt * 1000 - 8 * 60 * 60 * 1000).toLocaleTimeString('en-US', { hour: 'numeric' }),\n            humidityLowTime: new Date(tomorrow.dt * 1000).toLocaleTimeString('en-US', { hour: 'numeric' }),\n            windHighTime: new Date(tomorrow.dt * 1000).toLocaleTimeString('en-US', { hour: 'numeric' })\n          };\n        }\n        \n        // Get timing estimates for today based on forecast data\n        const todayForecast = forecastData.list.slice(0, 8); // Next 24 hours\n        if (todayForecast.length > 0) {\n          const maxTempItem = todayForecast.reduce((max: any, item: any) => \n            item.main.temp_max > max.main.temp_max ? item : max);\n          const minTempItem = todayForecast.reduce((min: any, item: any) => \n            item.main.temp_min < min.main.temp_min ? item : min);\n          \n          todayHighTime = new Date(maxTempItem.dt * 1000).toLocaleTimeString('en-US', { hour: 'numeric' });\n          todayLowTime = new Date(minTempItem.dt * 1000).toLocaleTimeString('en-US', { hour: 'numeric' });\n        }\n      }\n\n      // Format response\n      const weatherData = {\n        current: {\n          temp: Math.round(data.main.temp),\n          condition: data.weather[0].description,\n          icon: data.weather[0].icon,\n          high: Math.round(data.main.temp_max),\n          low: Math.round(data.main.temp_min),\n          humidity: data.main.humidity,\n          windSpeed: Math.round(data.wind?.speed || 0),\n          windDirection: data.wind?.deg || 0,\n          highTime: todayHighTime,\n          lowTime: todayLowTime,\n          humidityHighTime: todayHumidityHighTime,\n          humidityLowTime: todayHumidityLowTime,\n          windHighTime: todayWindHighTime\n        },\n        forecast: tomorrowData ? [tomorrowData] : [\n          { \n            name: 'Tomorrow', \n            temp: 38, \n            high: 42, \n            low: 35, \n            humidity: 70, \n            windSpeed: 12, \n            windDirection: 225, \n            icon: 'rain', \n            highTime: '3:00 PM',\n            lowTime: '7:00 AM',\n            humidityHighTime: '5:00 AM',\n            humidityLowTime: '3:00 PM',\n            windHighTime: '4:00 PM'\n          }\n        ]\n      };\n      \n      res.json(weatherData);\n    } catch (error) {\n      console.error('Weather API error:', error);\n      res.status(500).json({ \n        error: 'Failed to fetch weather data',\n        message: error instanceof Error ? error.message : 'Unknown error'\n      });\n    }\n  });\n\n  // Prayer times API endpoint\n  app.get('/api/prayer-times', async (req, res) => {\n    try {\n      const location = req.query.location as string || 'Vienna,VA,US';\n      \n      // Get coordinates for location first\n      const geoResponse = await fetch(\n        `https://api.aladhan.com/v1/timingsByCity?city=Vienna&country=US&state=VA&method=2`\n      );\n      \n      if (!geoResponse.ok) {\n        throw new Error(`Prayer times API error: ${geoResponse.status}`);\n      }\n      \n      const geoData = await geoResponse.json();\n      const timings = geoData.data.timings;\n      \n      // Format prayer times\n      const prayerTimes = [\n        { name: 'Fajr', time: convertTo12Hour(timings.Fajr) },\n        { name: 'Dhuhr', time: convertTo12Hour(timings.Dhuhr) },\n        { name: 'Asr', time: convertTo12Hour(timings.Asr) },\n        { name: 'Maghrib', time: convertTo12Hour(timings.Maghrib) },\n        { name: 'Isha', time: convertTo12Hour(timings.Isha) }\n      ];\n      \n      res.json(prayerTimes);\n    } catch (error) {\n      console.error('Prayer times API error:', error);\n      res.status(500).json({ \n        error: 'Failed to fetch prayer times',\n        message: error instanceof Error ? error.message : 'Unknown error'\n      });\n    }\n  });\n\n  // News API endpoint\n  app.get('/api/news', async (req, res) => {\n    try {\n      const apiKey = process.env.NEWS_API_KEY || process.env.NEWSAPI_KEY;\n      \n      if (!apiKey) {\n        // Fallback to RSS feeds if no API key\n        const sampleNews = {\n          international: [\n            { title: \"Climate summit reaches historic agreement on carbon emissions\", url: \"https://www.bbc.com/news\" },\n            { title: \"European markets respond to new trade policies\", url: \"https://www.bbc.com/news\" },\n            { title: \"Scientists discover new archaeological site in Peru\", url: \"https://www.bbc.com/news\" },\n            { title: \"International space station receives new crew members\", url: \"https://www.bbc.com/news\" },\n            { title: \"Diplomatic talks continue over regional trade agreements\", url: \"https://www.bbc.com/news\" },\n            { title: \"Global health initiative launches vaccination program\", url: \"https://www.bbc.com/news\" },\n            { title: \"Technology partnership formed between emerging economies\", url: \"https://www.bbc.com/news\" },\n            { title: \"Olympic committee announces preparations for upcoming games\", url: \"https://www.bbc.com/news\" },\n            { title: \"UNESCO designates new world heritage sites\", url: \"https://www.bbc.com/news\" },\n            { title: \"International cooperation treaty signed on ocean conservation\", url: \"https://www.bbc.com/news\" }\n          ],\n          us: [\n            { title: \"Infrastructure bill allocates funds for renewable energy\", url: \"https://www.bbc.com/news\" },\n            { title: \"Education reform proposals advance in Congress\", url: \"https://www.bbc.com/news\" },\n            { title: \"Tech companies announce major hiring initiatives\", url: \"https://www.bbc.com/news\" },\n            { title: \"Federal reserve considers new monetary policy measures\", url: \"https://www.bbc.com/news\" },\n            { title: \"Supreme Court hears case on digital privacy rights\", url: \"https://www.bbc.com/news\" },\n            { title: \"National parks service expands conservation programs\", url: \"https://www.bbc.com/news\" },\n            { title: \"Healthcare system improvements show positive outcomes\", url: \"https://www.bbc.com/news\" },\n            { title: \"Border security measures updated following bipartisan agreement\", url: \"https://www.bbc.com/news\" },\n            { title: \"Veterans affairs department expands mental health services\", url: \"https://www.bbc.com/news\" },\n            { title: \"Transportation infrastructure receives major upgrade funding\", url: \"https://www.bbc.com/news\" }\n          ],\n          business: [\n            { title: \"Electric vehicle sales surge in Q4 reports\", url: \"https://www.bbc.com/news\" },\n            { title: \"Banking sector adapts to new digital payment trends\", url: \"https://www.bbc.com/news\" },\n            { title: \"Startup funding reaches new milestone\", url: \"https://www.bbc.com/news\" },\n            { title: \"Renewable energy companies report record growth\", url: \"https://www.bbc.com/news\" },\n            { title: \"Artificial intelligence market expands globally\", url: \"https://www.bbc.com/news\" },\n            { title: \"Supply chain innovations reduce delivery times\", url: \"https://www.bbc.com/news\" },\n            { title: \"Cryptocurrency regulations updated for institutional investors\", url: \"https://www.bbc.com/news\" },\n            { title: \"Manufacturing sector shows strong quarterly performance\", url: \"https://www.bbc.com/news\" },\n            { title: \"Real estate market stabilizes after recent fluctuations\", url: \"https://www.bbc.com/news\" },\n            { title: \"Small business lending programs expand nationwide\", url: \"https://www.bbc.com/news\" }\n          ]\n        };\n        \n        return res.json(sampleNews);\n      }\n\n      // Fetch from News API\n      const responses = await Promise.allSettled([\n        fetch(`https://newsapi.org/v2/top-headlines?category=general&country=us&pageSize=5&apiKey=${apiKey}`),\n        fetch(`https://newsapi.org/v2/top-headlines?category=business&country=us&pageSize=5&apiKey=${apiKey}`)\n      ]);\n\n      const newsData = {\n        international: [],\n        us: [],\n        business: []\n      };\n\n      // Process responses\n      for (let i = 0; i < responses.length; i++) {\n        const result = responses[i];\n        if (result.status === 'fulfilled' && result.value.ok) {\n          const data = await result.value.json();\n          const articles = data.articles?.slice(0, 10).map((article: any) => ({\n            title: article.title,\n            url: article.url\n          })) || [];\n          \n          if (i === 0) newsData.us = articles;\n          if (i === 1) newsData.business = articles;\n        }\n      }\n\n      // Add some international news (can be expanded to use separate API call)\n      newsData.international = newsData.us.slice(0, 10);\n      \n      res.json(newsData);\n    } catch (error) {\n      console.error('News API error:', error);\n      res.status(500).json({ \n        error: 'Failed to fetch news',\n        message: error instanceof Error ? error.message : 'Unknown error'\n      });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n\n// Helper function to convert 24-hour time to 12-hour format\nfunction convertTo12Hour(time24: string): string {\n  const [hours, minutes] = time24.split(':');\n  const hour = parseInt(hours);\n  const ampm = hour >= 12 ? 'PM' : 'AM';\n  const hour12 = hour % 12 || 12;\n  return `${hour12}:${minutes} ${ampm}`;\n}\n","size_bytes":12193},"server/storage.ts":{"content":"import { type User, type InsertUser } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n\n  constructor() {\n    this.users = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":993},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n","size_bytes":584},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Dashboard from \"@/pages/dashboard\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":714},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(36, 33%, 98%);\n  --foreground: hsl(25, 45%, 11%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(25, 45%, 11%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(25, 45%, 11%);\n  --primary: hsl(199, 60%, 73%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(25, 45%, 11%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(240, 1.9608%, 90%);\n  --muted-foreground: hsl(25, 45%, 11%);\n  --accent: hsl(200, 100%, 96%);\n  --accent-foreground: hsl(199, 60%, 73%);\n  --destructive: hsl(356.3033, 90.5579%, 54.3137%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(201.4286, 30.4348%, 90.9804%);\n  --input: hsl(200, 23.0769%, 97.4510%);\n  --ring: hsl(199, 60%, 73%);\n  \n  /* Custom Dashboard Colors */\n  --warm-bg: hsl(36, 33%, 98%);\n  --sky-blue: hsl(199, 60%, 73%);\n  --soft-purple: hsl(248, 53%, 64%);\n  --coral-pink: hsl(271, 81%, 56%);\n  --sage-green: hsl(82, 26%, 65%);\n  --dark-brown: hsl(0, 0%, 0%);\n  --light-accent: hsl(200, 100%, 96%);\n  \n  --font-sans: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1rem;\n  --shadow-2xs: 0px 1px 2px 0px hsl(0, 0%, 0%, 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(0, 0%, 0%, 0.1), 0px 1px 2px 0px hsl(0, 0%, 0%, 0.06);\n  --shadow-sm: 0px 1px 3px 0px hsl(0, 0%, 0%, 0.1), 0px 1px 2px 0px hsl(0, 0%, 0%, 0.06);\n  --shadow: 0px 1px 3px 0px hsl(0, 0%, 0%, 0.1), 0px 1px 2px 0px hsl(0, 0%, 0%, 0.06);\n  --shadow-md: 0px 4px 6px -1px hsl(0, 0%, 0%, 0.1), 0px 2px 4px -1px hsl(0, 0%, 0%, 0.06);\n  --shadow-lg: 0px 10px 15px -3px hsl(0, 0%, 0%, 0.1), 0px 4px 6px -2px hsl(0, 0%, 0%, 0.05);\n  --shadow-xl: 0px 20px 25px -5px hsl(0, 0%, 0%, 0.1), 0px 10px 10px -5px hsl(0, 0%, 0%, 0.04);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0, 0%, 0%, 0.25);\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(200, 6.6667%, 91.1765%);\n  --card: hsl(228, 9.8039%, 10%);\n  --card-foreground: hsl(0, 0%, 85.0980%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(200, 6.6667%, 91.1765%);\n  --primary: hsl(199, 60%, 73%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(195, 15.3846%, 94.9020%);\n  --secondary-foreground: hsl(25, 45%, 11%);\n  --muted: hsl(0, 0%, 9.4118%);\n  --muted-foreground: hsl(210, 3.3898%, 46.2745%);\n  --accent: hsl(205.7143, 70%, 7.8431%);\n  --accent-foreground: hsl(199, 60%, 73%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased;\n    background-color: var(--warm-bg);\n    color: hsl(0, 0%, 0%);\n  }\n}\n\n@layer components {\n  .dashboard-card {\n    @apply bg-white rounded-2xl p-6 shadow-sm border border-gray-100;\n  }\n  \n  .section-title {\n    @apply text-xl font-semibold mb-4;\n    color: hsl(0, 0%, 0%);\n  }\n  \n  .subsection-title {\n    @apply text-lg font-medium mb-4;\n  }\n  \n  .sky-blue-accent {\n    color: var(--sky-blue);\n  }\n  \n  .soft-purple-accent {\n    color: var(--soft-purple);\n  }\n  \n  .coral-pink-accent {\n    color: var(--coral-pink);\n  }\n  \n  .sage-green-accent {\n    color: var(--sage-green);\n  }\n  \n  .btn-sky-blue {\n    background-color: var(--sky-blue);\n    @apply text-white px-4 py-2 rounded-lg font-medium hover:opacity-90 transition-all duration-200;\n  }\n  \n  .btn-coral-pink {\n    background-color: var(--coral-pink);\n    @apply text-white px-4 py-2 rounded-lg font-medium hover:opacity-90 transition-all duration-200;\n  }\n  \n  .btn-soft-purple {\n    background-color: var(--soft-purple);\n    @apply text-white px-4 py-2 rounded-lg font-medium hover:opacity-90 transition-all duration-200;\n  }\n  \n  .btn-sage-green {\n    background-color: var(--sage-green);\n    @apply text-white px-4 py-2 rounded-lg font-medium hover:opacity-90 transition-all duration-200;\n  }\n}\n\n@layer utilities {\n  .text-warm-bg {\n    color: var(--warm-bg);\n  }\n  \n  .text-sky-blue {\n    color: var(--sky-blue);\n  }\n  \n  .text-soft-purple {\n    color: var(--soft-purple);\n  }\n  \n  .text-coral-pink {\n    color: var(--coral-pink);\n  }\n  \n  .text-sage-green {\n    color: var(--sage-green);\n  }\n  \n  .text-dark-brown {\n    color: hsl(0, 0%, 0%);\n  }\n  \n  .bg-warm-bg {\n    background-color: var(--warm-bg);\n  }\n  \n  .bg-sky-blue {\n    background-color: var(--sky-blue);\n  }\n  \n  .bg-soft-purple {\n    background-color: var(--soft-purple);\n  }\n  \n  .bg-coral-pink {\n    background-color: var(--coral-pink);\n  }\n  \n  .bg-sage-green {\n    background-color: var(--sage-green);\n  }\n  \n  .bg-light-accent {\n    background-color: var(--light-accent);\n  }\n}\n","size_bytes":4609},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-local-storage.ts":{"content":"import { useState, useEffect } from 'react';\n\nexport function useLocalStorage<T>(key: string, initialValue: T) {\n  const [storedValue, setStoredValue] = useState<T>(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      console.error(`Error reading localStorage key \"${key}\":`, error);\n      return initialValue;\n    }\n  });\n\n  const setValue = (value: T | ((val: T) => T)) => {\n    try {\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n      setStoredValue(valueToStore);\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      console.error(`Error setting localStorage key \"${key}\":`, error);\n    }\n  };\n\n  return [storedValue, setValue] as const;\n}\n\nexport function useHabits() {\n  const [habits, setHabits] = useLocalStorage('dashboard-habits', [\n    { id: '1', name: 'Morning meditation', completed: false, streak: 5 },\n    { id: '2', name: 'Drink water upon waking', completed: false, streak: 12 },\n    { id: '3', name: 'Read for 30 minutes', completed: false, streak: 3 },\n    { id: '4', name: 'Exercise', completed: false, streak: 8 },\n  ]);\n\n  const toggleHabit = (id: string) => {\n    setHabits(prev => prev.map(habit => \n      habit.id === id \n        ? { ...habit, completed: !habit.completed, streak: !habit.completed ? habit.streak + 1 : Math.max(0, habit.streak - 1) }\n        : habit\n    ));\n  };\n\n  const addHabit = (name: string) => {\n    const newHabit = {\n      id: Date.now().toString(),\n      name,\n      completed: false,\n      streak: 0\n    };\n    setHabits(prev => [...prev, newHabit]);\n  };\n\n  const deleteHabit = (id: string) => {\n    setHabits(prev => prev.filter(habit => habit.id !== id));\n  };\n\n  return { habits, toggleHabit, addHabit, deleteHabit };\n}\n\nexport function useDailyGoals() {\n  const [goals, setGoals] = useLocalStorage('dashboard-goals', '');\n  const [lastUpdated, setLastUpdated] = useLocalStorage('dashboard-goals-updated', '');\n  const [yesterdaysGoals, setYesterdaysGoals] = useLocalStorage('dashboard-yesterday-goals', '');\n\n  const updateGoals = (newGoals: string) => {\n    // Check if it's a new day\n    const today = new Date().toDateString();\n    const lastDate = lastUpdated ? new Date(lastUpdated).toDateString() : '';\n    \n    if (today !== lastDate && goals) {\n      // Save current goals as yesterday's goals\n      setYesterdaysGoals(goals);\n    }\n    \n    setGoals(newGoals);\n    setLastUpdated(new Date().toLocaleString());\n  };\n\n  return { goals, lastUpdated, updateGoals, yesterdaysGoals };\n}\n","size_bytes":2630},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/api-services.ts":{"content":"export interface WeatherData {\n  current: {\n    temp: number;\n    condition: string;\n    icon: string;\n    high: number;\n    low: number;\n    humidity: number;\n    windSpeed: number;\n    windDirection: number;\n    highTime: string;\n    lowTime: string;\n    humidityHighTime: string;\n    humidityLowTime: string;\n    windHighTime: string;\n  };\n  forecast: Array<{\n    name: string;\n    temp: number;\n    high: number;\n    low: number;\n    humidity: number;\n    windSpeed: number;\n    windDirection: number;\n    icon: string;\n    highTime: string;\n    lowTime: string;\n    humidityHighTime: string;\n    humidityLowTime: string;\n    windHighTime: string;\n  }>;\n}\n\nexport interface PrayerTime {\n  name: string;\n  time: string;\n}\n\nexport interface NewsArticle {\n  title: string;\n  url: string;\n}\n\nexport interface NewsData {\n  international: NewsArticle[];\n  us: NewsArticle[];\n  business: NewsArticle[];\n}\n\nconst API_BASE_URL = '/api';\n\nexport async function fetchWeather(location: string = 'Vienna,VA,US'): Promise<WeatherData> {\n  const response = await fetch(`${API_BASE_URL}/weather?location=${encodeURIComponent(location)}`);\n  if (!response.ok) {\n    throw new Error('Failed to fetch weather data');\n  }\n  return response.json();\n}\n\nexport async function fetchPrayerTimes(location: string = 'Vienna,VA,US'): Promise<PrayerTime[]> {\n  const response = await fetch(`${API_BASE_URL}/prayer-times?location=${encodeURIComponent(location)}`);\n  if (!response.ok) {\n    throw new Error('Failed to fetch prayer times');\n  }\n  return response.json();\n}\n\nexport async function fetchNews(): Promise<NewsData> {\n  const response = await fetch(`${API_BASE_URL}/news`);\n  if (!response.ok) {\n    throw new Error('Failed to fetch news');\n  }\n  return response.json();\n}\n","size_bytes":1757},"client/src/lib/content-database.ts":{"content":"export interface FrenchNoun {\n  french: string;\n  english: string;\n  example: string;\n}\n\nexport interface FrenchVerb {\n  verb: string;\n  conjugations: {\n    je: string;\n    tu: string;\n    il: string;\n    nous: string;\n    vous: string;\n    ils: string;\n  };\n}\n\nexport interface GrammarLesson {\n  title: string;\n  explanation: string;\n  example: string;\n}\n\nexport interface HistoryEvent {\n  year: string;\n  description: string;\n}\n\nexport interface HistoricalFigure {\n  name: string;\n  dates: string;\n  biography: string;\n  notable: string;\n}\n\nexport interface ScienceFact {\n  title: string;\n  explanation: string;\n  field: string;\n}\n\nexport interface MathConcept {\n  title: string;\n  explanation: string;\n  formula?: string;\n  simpleExplanation: string;\n  detailedExplanation: string;\n}\n\nexport interface NeuroFact {\n  title: string;\n  explanation: string;\n  funFact: string;\n}\n\nexport interface Artwork {\n  title: string;\n  artist: string;\n  description: string;\n  location: string;\n  imageUrl: string;\n}\n\nexport interface Etymology {\n  word: string;\n  pronunciation: string;\n  origin: string;\n  meaning: string;\n}\n\nexport interface Literature {\n  title: string;\n  author: string;\n  opening: string;\n}\n\nexport interface Puzzle {\n  question: string;\n  solution: string;\n}\n\nexport interface Philosophy {\n  title: string;\n  question: string;\n  explores: string;\n}\n\nexport interface Fallacy {\n  name: string;\n  example: string;\n  explanation: string;\n}\n\nexport interface CognitiveBias {\n  name: string;\n  description: string;\n  watchFor: string;\n}\n\nexport interface Innovation {\n  challenge: string;\n  solution: string;\n}\n\nexport interface Design {\n  example: string;\n  principle: string;\n  details: string;\n}\n\nexport interface Invention {\n  item: string;\n  story: string;\n  lesson: string;\n}\n\nexport interface Cultural {\n  problem: string;\n  solutions: Array<{\n    country: string;\n    approach: string;\n    color: string;\n  }>;\n}\n\nexport interface Consequences {\n  case: string;\n  story: string;\n  lesson: string;\n}\n\nexport interface AltHistory {\n  scenario: string;\n  speculation: string;\n  impact: string;\n}\n\nexport interface Joke {\n  setup: string;\n  punchline: string;\n}\n\nconst getDayOfYear = () => {\n  const now = new Date();\n  const start = new Date(now.getFullYear(), 0, 0);\n  const diff = now.getTime() - start.getTime();\n  return Math.floor(diff / (1000 * 60 * 60 * 24));\n};\n\n// Content rotates based on day of year to ensure variety\nconst getRotatingIndex = (arrayLength: number) => {\n  return getDayOfYear() % arrayLength;\n};\n\nexport const frenchNouns: FrenchNoun[] = [\n  {\n    french: \"la bibliothèque\",\n    english: \"the library\",\n    example: \"Je vais à la bibliothèque chaque mardi.\"\n  },\n  {\n    french: \"le parapluie\",\n    english: \"the umbrella\", \n    example: \"N'oublie pas ton parapluie!\"\n  },\n  {\n    french: \"la cuisinière\",\n    english: \"the cook/stove\",\n    example: \"Ma grand-mère est une excellente cuisinière.\"\n  },\n  {\n    french: \"l'ordinateur\",\n    english: \"the computer\",\n    example: \"Mon ordinateur est très rapide.\"\n  },\n  {\n    french: \"la pharmacie\",\n    english: \"the pharmacy\",\n    example: \"La pharmacie ferme à dix-huit heures.\"\n  }\n];\n\nexport const frenchVerbs: FrenchVerb[] = [\n  {\n    verb: \"prendre (to take)\",\n    conjugations: {\n      je: \"prends\",\n      tu: \"prends\", \n      il: \"prend\",\n      nous: \"prenons\",\n      vous: \"prenez\",\n      ils: \"prennent\"\n    }\n  },\n  {\n    verb: \"faire (to do/make)\",\n    conjugations: {\n      je: \"fais\",\n      tu: \"fais\",\n      il: \"fait\", \n      nous: \"faisons\",\n      vous: \"faites\",\n      ils: \"font\"\n    }\n  },\n  {\n    verb: \"venir (to come)\",\n    conjugations: {\n      je: \"viens\",\n      tu: \"viens\",\n      il: \"vient\",\n      nous: \"venons\", \n      vous: \"venez\",\n      ils: \"viennent\"\n    }\n  }\n];\n\nexport const grammarLessons: GrammarLesson[] = [\n  {\n    title: \"Definite Articles\",\n    explanation: \"French has four definite articles: le (masculine singular), la (feminine singular), l' (before vowels), and les (plural). Unlike English, French articles agree with the gender and number of the noun.\",\n    example: \"le chat (the cat, masc.) vs. la maison (the house, fem.)\"\n  },\n  {\n    title: \"Adjective Agreement\", \n    explanation: \"French adjectives must agree in gender and number with the nouns they modify. Most feminine adjectives add -e, and plurals add -s.\",\n    example: \"un homme grand → une femme grande → des hommes grands\"\n  },\n  {\n    title: \"Subjunctive Mood\",\n    explanation: \"The subjunctive expresses doubt, emotion, or subjectivity. It's often triggered by expressions like 'il faut que' (it's necessary that) or 'je doute que' (I doubt that).\",\n    example: \"Il faut que tu viennes. (It's necessary that you come.)\"\n  }\n];\n\nexport const historyEvents: HistoryEvent[] = [\n  {\n    year: \"1793\",\n    description: \"King Louis XVI of France is executed during the French Revolution, marking a pivotal moment in European history.\"\n  },\n  {\n    year: \"1861\", \n    description: \"Jefferson Davis resigns from the U.S. Senate as Mississippi secedes from the Union, escalating tensions before the Civil War.\"\n  },\n  {\n    year: \"1976\",\n    description: \"The first commercial Concorde supersonic passenger flight takes off, revolutionizing air travel with unprecedented speed.\"\n  },\n  {\n    year: \"1519\",\n    description: \"Spanish conquistador Hernán Cortés lands on the coast of Mexico, beginning the conquest of the Aztec Empire.\"\n  },\n  {\n    year: \"1887\",\n    description: \"The Michelson-Morley experiment fails to detect the luminiferous ether, paving the way for Einstein's theory of relativity.\"\n  }\n];\n\nexport const historicalFigures: HistoricalFigure[] = [\n  {\n    name: \"Marie Curie\",\n    dates: \"1867-1934\",\n    biography: \"Polish-French physicist and chemist who conducted pioneering research on radioactivity. She was the first woman to win a Nobel Prize, the first person to win Nobel Prizes in two different scientific fields (Physics and Chemistry), and the first female professor at the University of Paris. Her discoveries laid the foundation for modern atomic physics and medical treatments using radiation.\",\n    notable: \"First woman to win Nobel Prize (1903)\"\n  },\n  {\n    name: \"Ibn Khaldun\",\n    dates: \"1332-1406\", \n    biography: \"North African historiographer who developed one of the earliest non-religious philosophies of history. His work 'Muqaddimah' introduced concepts that would later become fundamental to sociology, economics, and historiography. He analyzed social cohesion, economic factors in political change, and the cyclical nature of civilizations centuries before European scholars.\",\n    notable: \"Father of sociology and historiography\"\n  },\n  {\n    name: \"Frederick Douglass\",\n    dates: \"1818-1895\",\n    biography: \"American social reformer, abolitionist, orator, writer, and statesman. Born into slavery, he escaped and became a leading voice in the anti-slavery movement. His autobiographies are considered some of the most influential narratives of American slavery. He also championed women's suffrage and civil rights.\",\n    notable: \"Most photographed American of the 19th century\"\n  }\n];\n\nexport const scienceFacts: ScienceFact[] = [\n  {\n    title: \"Quantum Entanglement\",\n    explanation: \"When two particles become entangled, measuring one instantly affects the other, regardless of the distance between them. Einstein called this 'spooky action at a distance.' This phenomenon is now being used to develop quantum computers and secure communication systems.\",\n    field: \"Quantum Physics\"\n  },\n  {\n    title: \"Mycorrhizal Networks\",\n    explanation: \"Underground fungal networks connect forest trees, allowing them to share nutrients, water, and information. These 'wood wide webs' can span entire forests and help trees coordinate responses to threats and environmental changes.\",\n    field: \"Forest Ecology\"\n  },\n  {\n    title: \"Tardigrade Resilience\", \n    explanation: \"These microscopic animals can survive extreme conditions including space vacuum, radiation 1000x lethal to humans, and temperatures from near absolute zero to 300°F. They achieve this by entering cryptobiosis, essentially pausing all biological processes.\",\n    field: \"Biology\"\n  }\n];\n\nexport const mathConcepts: MathConcept[] = [\n  {\n    title: \"The Fibonacci Spiral\",\n    explanation: \"The Fibonacci sequence (0, 1, 1, 2, 3, 5, 8, 13...) appears everywhere in nature: flower petals, pinecones, shells, and hurricanes. When you draw squares with sides equal to Fibonacci numbers and connect them with curves, you get the golden spiral.\",\n    formula: \"φ = (1 + √5) / 2 ≈ 1.618\",\n    simpleExplanation: \"It's a special pattern of numbers where you add the two previous numbers to get the next one (like 1+1=2, 1+2=3, 2+3=5). This pattern shows up everywhere in nature, like the spirals in sunflowers and seashells!\",\n    detailedExplanation: \"The Fibonacci sequence demonstrates how mathematical patterns emerge in biological systems through optimal growth processes. The ratio between consecutive Fibonacci numbers approaches the golden ratio (φ ≈ 1.618), which appears in nautilus shells, galaxy spirals, and DNA structure due to its mathematical efficiency in space utilization and structural stability.\"\n  },\n  {\n    title: \"Euler's Identity\",\n    explanation: \"Often called the most beautiful equation in mathematics, it elegantly connects five fundamental mathematical constants: e, i, π, 1, and 0. It demonstrates the deep relationship between exponential and trigonometric functions.\",\n    formula: \"e^(iπ) + 1 = 0\",\n    simpleExplanation: \"This equation combines five of the most important numbers in math into one beautiful formula. It's like finding out that different pieces of a puzzle all fit together perfectly!\",\n    detailedExplanation: \"Euler's identity reveals the profound connection between exponential growth (e), circular motion (π), imaginary numbers (i), and the fundamental concepts of something (1) and nothing (0). It bridges algebra, geometry, and analysis, showing how complex exponential functions relate to trigonometric functions through the complex plane.\"\n  },\n  {\n    title: \"The Monty Hall Problem\",\n    explanation: \"A probability puzzle where you're more likely to win by switching doors (2/3 chance) than sticking with your first choice (1/3 chance). This counterintuitive result stumped even professional mathematicians initially.\",\n    formula: \"P(win by switching) = 2/3\",\n    simpleExplanation: \"Imagine you're on a game show with three doors. Behind one door is a prize, behind the others are nothing. After you pick a door, the host opens one of the remaining doors that has nothing behind it. You should always switch to the other door because it gives you a better chance of winning!\",\n    detailedExplanation: \"The Monty Hall problem illustrates conditional probability and how additional information changes probability distributions. Initially, each door has a 1/3 probability. When the host reveals a non-winning door, the probability doesn't redistribute equally—the remaining unopened door inherits the combined probability of the two doors you didn't initially choose, making switching the optimal strategy.\"\n  }\n];\n\nexport const neuroFacts: NeuroFact[] = [\n  {\n    title: \"Neuroplasticity\", \n    explanation: \"Your brain can rewire itself throughout your life. Learning new skills literally changes your brain's structure by forming new neural connections. This is why practicing habits for 21-66 days can make them automatic—you're physically reshaping your neural pathways.\",\n    funFact: \"Adult brains generate ~1,400 new neurons daily\"\n  },\n  {\n    title: \"Mirror Neurons\",\n    explanation: \"These specialized cells fire both when you perform an action and when you observe someone else performing the same action. They're crucial for empathy, learning by imitation, and understanding others' intentions.\",\n    funFact: \"They help explain why yawning is contagious\"\n  },\n  {\n    title: \"Sleep Consolidation\",\n    explanation: \"During sleep, your brain literally washes itself with cerebrospinal fluid, clearing out metabolic waste including amyloid-beta plaques associated with Alzheimer's. Sleep also consolidates memories by strengthening important neural connections.\",\n    funFact: \"You forget 2/3 of dreams within 5 minutes of waking\"\n  }\n];\n\n// Get rotating content based on day of year\nexport const getTodaysFrenchNouns = (): FrenchNoun[] => {\n  const startIndex = getRotatingIndex(frenchNouns.length);\n  return [\n    frenchNouns[startIndex],\n    frenchNouns[(startIndex + 1) % frenchNouns.length],\n    frenchNouns[(startIndex + 2) % frenchNouns.length]\n  ];\n};\n\nexport const getTodaysFrenchVerb = (): FrenchVerb => {\n  return frenchVerbs[getRotatingIndex(frenchVerbs.length)];\n};\n\nexport const getTodaysGrammarLesson = (): GrammarLesson => {\n  return grammarLessons[getRotatingIndex(grammarLessons.length)];\n};\n\nexport const getTodaysHistoryEvents = (): HistoryEvent[] => {\n  const startIndex = getRotatingIndex(historyEvents.length);\n  return [\n    historyEvents[startIndex],\n    historyEvents[(startIndex + 1) % historyEvents.length],\n    historyEvents[(startIndex + 2) % historyEvents.length]\n  ];\n};\n\nexport const getTodaysHistoricalFigure = (): HistoricalFigure => {\n  return historicalFigures[getRotatingIndex(historicalFigures.length)];\n};\n\nexport const getTodaysScienceFact = (): ScienceFact => {\n  return scienceFacts[getRotatingIndex(scienceFacts.length)];\n};\n\nexport const getTodaysMathConcept = (): MathConcept => {\n  return mathConcepts[getRotatingIndex(mathConcepts.length)];\n};\n\nexport const getTodaysNeuroFact = (): NeuroFact => {\n  return neuroFacts[getRotatingIndex(neuroFacts.length)];\n};\n\nexport const artworks: Artwork[] = [\n  {\n    title: \"The School of Athens\",\n    artist: \"Raphael, 1509-1511\",\n    description: \"This Renaissance fresco represents philosophy and is considered one of the greatest paintings in Western art. Located in the Vatican's Apostolic Palace, it depicts classical philosophers including Plato and Aristotle in an idealized ancient setting. The perfect perspective and architectural grandeur exemplify High Renaissance ideals of harmony, proportion, and the synthesis of Christian and classical traditions.\",\n    location: \"Vatican Museums, Rome\",\n    imageUrl: \"https://images.unsplash.com/photo-1541961017774-22349e4a1262?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&h=600\"\n  },\n  {\n    title: \"The Starry Night\", \n    artist: \"Vincent van Gogh, 1889\",\n    description: \"This post-impressionist masterpiece depicts a swirling night sky over a village. Van Gogh painted it while in an asylum, and it represents his unique vision of movement and energy in nature. The painting's dynamic brushstrokes and vivid colors revolutionized how artists could express emotion through technique.\",\n    location: \"Museum of Modern Art, New York\",\n    imageUrl: \"https://images.unsplash.com/photo-1578321272176-b7bbc0679853?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&h=600\"\n  }\n];\n\nexport const etymologies: Etymology[] = [\n  {\n    word: \"Serendipity\",\n    pronunciation: \"/ˌser.ənˈdɪp.ə.t̬i/\",\n    origin: \"Coined in 1754 by Horace Walpole from the Persian fairy tale 'The Three Princes of Serendip,' whose heroes 'were always making discoveries, by accidents and sagacity, of things which they were not in quest of.' Serendip was the ancient name for Sri Lanka.\",\n    meaning: \"Pleasant surprise or fortunate discovery\"\n  },\n  {\n    word: \"Quarantine\",\n    pronunciation: \"/ˈkwɔr.ən.tiːn/\",\n    origin: \"From Italian 'quaranta giorni' meaning 'forty days' - the period ships were required to wait before entering port during plague outbreaks in 14th-century Venice. The number forty has biblical significance and was considered sufficient time for diseases to manifest.\",\n    meaning: \"Isolation to prevent disease spread\"\n  }\n];\n\nexport const literature: Literature[] = [\n  {\n    title: \"Pride and Prejudice\",\n    author: \"Jane Austen, 1813\",\n    opening: \"It is a truth universally acknowledged, that a single man in possession of a good fortune, must be in want of a wife. However little known the feelings or views of such a man may be on his first entering a neighbourhood, this truth is so well fixed in the minds of the surrounding families, that he is considered the rightful property of some one or other of their daughters.\"\n  },\n  {\n    title: \"1984\",\n    author: \"George Orwell, 1949\", \n    opening: \"It was a bright cold day in April, and the clocks were striking thirteen. Winston Smith, his chin nuzzled into his breast in an effort to escape the vile wind, slipped quickly through the glass doors of Victory Mansions, though not quickly enough to prevent a swirl of gritty dust from entering along with him.\"\n  }\n];\n\nexport const puzzles: Puzzle[] = [\n  {\n    question: \"Three switches control three light bulbs in another room. You can flip the switches as many times as you want, but you can only go into the room with the bulbs once. How do you determine which switch controls which bulb?\",\n    solution: \"Turn on the first switch for a few minutes, then turn it off. Turn on the second switch and leave it on. When you enter the room: the lit bulb = switch 2, the warm unlit bulb = switch 1, the cool unlit bulb = switch 3.\"\n  },\n  {\n    question: \"A man lives on the 20th floor of an apartment building. Every morning he takes the elevator down to the ground floor. When he comes home, he takes the elevator to the 10th floor and walks the rest of the way... except on rainy days, when he takes the elevator all the way to the 20th floor. Why?\",\n    solution: \"The man is too short to reach the button for the 20th floor. On rainy days, he has an umbrella which he can use to press the higher button.\"\n  }\n];\n\nexport const philosophies: Philosophy[] = [\n  {\n    title: \"Ship of Theseus\",\n    question: \"If you gradually replace every part of a ship with new parts, is it still the same ship? What if you then rebuild a new ship from all the original parts—which one is the 'real' Ship of Theseus?\",\n    explores: \"Identity, continuity, and change\"\n  },\n  {\n    title: \"The Trolley Problem\",\n    question: \"A runaway trolley is heading toward five people. You can pull a lever to divert it to a side track, where it will kill one person instead. Do you pull the lever? What if you had to push someone off a bridge to stop the trolley?\",\n    explores: \"Utilitarianism vs. deontological ethics\"\n  }\n];\n\nexport const fallacies: Fallacy[] = [\n  {\n    name: \"Survivorship Bias\",\n    example: \"All the successful entrepreneurs I know dropped out of college, so dropping out leads to success.\",\n    explanation: \"We only see the successful dropouts, not the millions who dropped out and failed. This bias appears in business advice, historical accounts, and product reviews.\"\n  },\n  {\n    name: \"Ad Hominem\",\n    example: \"Don't listen to her opinion on climate change—she's not even a scientist.\",\n    explanation: \"Attacking the person making an argument rather than addressing the argument itself. Even non-experts can present valid evidence or logical reasoning.\"\n  }\n];\n\nexport const cognitiveBiases: CognitiveBias[] = [\n  {\n    name: \"Anchoring Effect\", \n    description: \"We rely too heavily on the first piece of information encountered. In negotiations, whoever states the first number 'anchors' the entire discussion around that range.\",\n    watchFor: \"First impressions, initial prices, opening offers in negotiations\"\n  },\n  {\n    name: \"Confirmation Bias\",\n    description: \"We seek information that confirms our existing beliefs and ignore contradictory evidence. Social media algorithms exploit this by showing us content that reinforces our views.\",\n    watchFor: \"Cherry-picking sources, dismissing opposing viewpoints, echo chambers\"\n  }\n];\n\nexport const innovations: Innovation[] = [\n  {\n    challenge: \"How would you design a bridge that can expand and contract with temperature changes without losing structural integrity?\",\n    solution: \"Use expansion joints—gaps filled with flexible materials that allow movement. Modern bridges use bearings that slide or rock, allowing the structure to 'breathe' safely.\"\n  },\n  {\n    challenge: \"How can you deliver medicine to specific cells in the body without affecting healthy cells?\",\n    solution: \"Nanotechnology allows for targeted drug delivery using microscopic carriers that recognize specific cell markers, like a molecular postal system with precise addresses.\"\n  }\n];\n\nexport const designs: Design[] = [\n  {\n    example: \"Swiss Army Knife\",\n    principle: \"Functional elegance\",\n    details: \"Perfect example of maximum utility in minimal space. Every tool serves multiple purposes, the design is immediately intuitive, and quality materials ensure reliability. Form follows function while maintaining aesthetic appeal.\"\n  },\n  {\n    example: \"iPhone Interface\",\n    principle: \"Intuitive interaction\",\n    details: \"Revolutionary touch interface that mimics physical interactions—pinch to zoom, swipe to scroll, tap to select. The design philosophy of 'it just works' eliminated the need for instruction manuals.\"\n  }\n];\n\nexport const inventions: Invention[] = [\n  {\n    item: \"Post-it Notes\",\n    story: \"Spencer Silver accidentally created a weak adhesive while trying to make super-strong glue. Years later, colleague Art Fry needed bookmarks that wouldn't fall out of his hymnal. The 'failed' adhesive became perfect for removable, repositionable notes.\",\n    lesson: \"Accidents + need recognition = innovation\"\n  },\n  {\n    item: \"Microwave Oven\",\n    story: \"Percy Spencer was working on radar technology when he noticed a chocolate bar in his pocket had melted. Instead of dismissing it, he experimented with other foods and discovered microwave cooking.\",\n    lesson: \"Curiosity about unexpected results leads to breakthroughs\"\n  }\n];\n\nexport const culturalProblems: Cultural[] = [\n  {\n    problem: \"Urban Transportation\",\n    solutions: [\n      {\n        country: \"Netherlands\",\n        approach: \"Extensive bike infrastructure and bike-train integration\",\n        color: \"soft-purple\"\n      },\n      {\n        country: \"Japan\", \n        approach: \"Precise timing systems and passenger etiquette\",\n        color: \"coral-pink\"\n      },\n      {\n        country: \"Singapore\",\n        approach: \"Dynamic pricing to reduce congestion\",\n        color: \"sage-green\"\n      }\n    ]\n  }\n];\n\nexport const consequences: Consequences[] = [\n  {\n    case: \"Cobra Effect\",\n    story: \"British colonial India offered bounties for dead cobras to reduce snake population. People started breeding cobras for the bounty money. When the program ended, breeders released their snakes, making the problem worse than before.\",\n    lesson: \"Incentives can backfire spectacularly\"\n  },\n  {\n    case: \"Streisand Effect\",\n    story: \"Barbra Streisand sued to suppress photos of her home, which led to far more people seeing the photos than if she had done nothing. Attempts to hide information often amplify its spread.\",\n    lesson: \"Suppression can amplify awareness\"\n  }\n];\n\nexport const altHistories: AltHistory[] = [\n  {\n    scenario: \"...the Library of Alexandria never burned?\",\n    speculation: \"We might have experienced the Scientific Revolution 1000+ years earlier. Ancient Greek and Roman scientific knowledge, combined with preserved works from around the world, could have accelerated human progress dramatically. Renaissance thinking might have emerged in the 8th century instead of the 15th.\",\n    impact: \"Technology, medicine, exploration\"\n  },\n  {\n    scenario: \"...the printing press was invented in China first reached Europe?\",\n    speculation: \"If Gutenberg hadn't independently invented the printing press, the Protestant Reformation might never have happened. The spread of ideas would have remained controlled by those who could afford hand-copied manuscripts, potentially delaying the Enlightenment by centuries.\",\n    impact: \"Religion, education, scientific progress\"\n  }\n];\n\nexport const jokes: Joke[] = [\n  {\n    setup: \"Why don't scientists trust atoms?\",\n    punchline: \"Because they make up everything!\"\n  },\n  {\n    setup: \"What do you call a fake noodle?\",\n    punchline: \"An impasta!\"\n  },\n  {\n    setup: \"Why did the math book look so sad?\",\n    punchline: \"Because it was full of problems!\"\n  },\n  {\n    setup: \"What's the best thing about Switzerland?\",\n    punchline: \"I don't know, but the flag is a big plus!\"\n  }\n];\n\nexport const getTodaysArtwork = (): Artwork => {\n  return artworks[getRotatingIndex(artworks.length)];\n};\n\nexport const getTodaysEtymology = (): Etymology => {\n  return etymologies[getRotatingIndex(etymologies.length)];\n};\n\nexport const getTodaysLiterature = (): Literature => {\n  return literature[getRotatingIndex(literature.length)];\n};\n\nexport const getTodaysPuzzle = (): Puzzle => {\n  return puzzles[getRotatingIndex(puzzles.length)];\n};\n\nexport const getTodaysPhilosophy = (): Philosophy => {\n  return philosophies[getRotatingIndex(philosophies.length)];\n};\n\nexport const getTodaysFallacy = (): Fallacy => {\n  return fallacies[getRotatingIndex(fallacies.length)];\n};\n\nexport const getTodaysCognitiveBias = (): CognitiveBias => {\n  return cognitiveBiases[getRotatingIndex(cognitiveBiases.length)];\n};\n\nexport const getTodaysInnovation = (): Innovation => {\n  return innovations[getRotatingIndex(innovations.length)];\n};\n\nexport const getTodaysDesign = (): Design => {\n  return designs[getRotatingIndex(designs.length)];\n};\n\nexport const getTodaysInvention = (): Invention => {\n  return inventions[getRotatingIndex(inventions.length)];\n};\n\nexport const getTodaysCultural = (): Cultural => {\n  return culturalProblems[getRotatingIndex(culturalProblems.length)];\n};\n\nexport const getTodaysConsequences = (): Consequences => {\n  return consequences[getRotatingIndex(consequences.length)];\n};\n\nexport const getTodaysJoke = (): Joke => {\n  return jokes[getRotatingIndex(jokes.length)];\n};\n","size_bytes":26100},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import { useState } from 'react';\nimport { Settings, RotateCcw, Download } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { MorningCentering } from '@/components/dashboard/MorningCentering';\nimport { DailyPlanning } from '@/components/dashboard/DailyPlanning';\nimport { NewsSection } from '@/components/dashboard/NewsSection';\nimport { LanguageLearning } from '@/components/dashboard/LanguageLearning';\nimport { HistoricalKnowledge } from '@/components/dashboard/HistoricalKnowledge';\nimport { ScienceMath } from '@/components/dashboard/ScienceMath';\nimport { ArtsCulture } from '@/components/dashboard/ArtsCulture';\nimport { InteractiveChallenges } from '@/components/dashboard/InteractiveChallenges';\nimport { AnalyticalThinking } from '@/components/dashboard/AnalyticalThinking';\nimport { Innovation } from '@/components/dashboard/Innovation';\nimport { CulturalInsights } from '@/components/dashboard/CulturalInsights';\nimport { NaturePractical } from '@/components/dashboard/NaturePractical';\nimport { Closing } from '@/components/dashboard/Closing';\n\nexport default function Dashboard() {\n  const currentDate = new Date().toLocaleDateString('en-US', { \n    weekday: 'long', \n    year: 'numeric', \n    month: 'long', \n    day: 'numeric' \n  });\n\n  const handleResetData = () => {\n    if (confirm('Are you sure you want to reset all your data? This cannot be undone.')) {\n      localStorage.clear();\n      window.location.reload();\n    }\n  };\n\n  const handleExportData = () => {\n    const data = {\n      habits: localStorage.getItem('dashboard-habits'),\n      goals: localStorage.getItem('dashboard-goals'),\n      exportDate: new Date().toISOString()\n    };\n    \n    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `dashboard-export-${new Date().toISOString().split('T')[0]}.json`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-warm-bg\">\n      {/* Header */}\n      <header className=\"sticky top-0 z-50 bg-warm-bg/90 backdrop-blur-md border-b border-gray-200\">\n        <div className=\"max-w-4xl mx-auto px-4 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <h1 className=\"text-2xl font-semibold text-dark-brown\" data-testid=\"main-title\">\n              Good Morning\n            </h1>\n            <div className=\"flex items-center space-x-4\">\n              <span className=\"text-sm text-gray-600\" data-testid=\"current-date\">\n                {currentDate}\n              </span>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors duration-200\"\n                data-testid=\"settings-button\"\n              >\n                <Settings className=\"w-5 h-5 text-gray-600\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"max-w-4xl mx-auto px-4 py-8 space-y-8\">\n        <MorningCentering />\n        <DailyPlanning />\n        <NewsSection />\n        <LanguageLearning />\n        <HistoricalKnowledge />\n        <ScienceMath />\n        <ArtsCulture />\n        <InteractiveChallenges />\n        <AnalyticalThinking />\n        <Innovation />\n        <CulturalInsights />\n        <NaturePractical />\n        <Closing />\n      </main>\n\n      {/* Footer */}\n      <footer className=\"bg-white border-t border-gray-200 mt-12\">\n        <div className=\"max-w-4xl mx-auto px-4 py-8\">\n          <div className=\"flex flex-col md:flex-row justify-between items-center space-y-4 md:space-y-0\">\n            <div className=\"text-sm text-gray-500\">\n              <span data-testid=\"last-updated\">\n                Last updated: {new Date().toLocaleDateString('en-US')} at {new Date().toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit' })}\n              </span>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={handleResetData}\n                className=\"text-sm text-gray-500 hover:text-dark-brown transition-colors\"\n                data-testid=\"reset-data\"\n              >\n                <RotateCcw className=\"w-4 h-4 mr-1\" />\n                Reset Data\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={handleExportData}\n                className=\"text-sm text-gray-500 hover:text-dark-brown transition-colors\"\n                data-testid=\"export-data\"\n              >\n                <Download className=\"w-4 h-4 mr-1\" />\n                Export Progress\n              </Button>\n              <Button\n                className=\"btn-sky-blue\"\n                size=\"sm\"\n                data-testid=\"footer-settings\"\n              >\n                Settings\n              </Button>\n            </div>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":5180},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/dashboard/AnalyticalThinking.tsx":{"content":"import { Card } from '@/components/ui/card';\nimport { getTodaysPhilosophy, getTodaysFallacy, getTodaysCognitiveBias } from '@/lib/content-database';\n\nexport function AnalyticalThinking() {\n  const philosophy = getTodaysPhilosophy();\n  const fallacy = getTodaysFallacy();\n  const bias = getTodaysCognitiveBias();\n\n  return (\n    <section className=\"space-y-6\">\n      <h2 className=\"section-title\">Analytical Thinking</h2>\n      \n      <div className=\"grid md:grid-cols-2 gap-6\">\n        {/* Optical Illusion */}\n        <Card className=\"dashboard-card\">\n          <h3 className=\"subsection-title sky-blue-accent mb-4\">Optical Illusion</h3>\n          <div className=\"space-y-4\">\n            <div className=\"bg-gray-100 rounded-lg p-8 text-center\" data-testid=\"optical-illusion\">\n              <div className=\"text-6xl font-bold\">\n                <span className=\"text-gray-300\">A</span>\n                <span className=\"text-gray-700\">A</span>\n                <span className=\"text-gray-300\">A</span>\n              </div>\n              <p className=\"text-xs text-gray-500 mt-2\">Stare at the center A for 30 seconds</p>\n            </div>\n            <div className=\"space-y-2\">\n              <h4 className=\"font-semibold text-dark-brown\">The Hermann Grid Effect</h4>\n              <p className=\"text-xs text-gray-700\">\n                Dark spots appear at intersections of white lines on a black grid. This happens because \n                of lateral inhibition in your retinal ganglion cells—when they detect contrast, \n                neighboring cells reduce their response, creating the illusion of darkness.\n              </p>\n            </div>\n          </div>\n        </Card>\n\n        {/* Statistical Paradox */}\n        <Card className=\"dashboard-card\">\n          <h3 className=\"subsection-title coral-pink-accent mb-4\">Statistical Insight</h3>\n          <div className=\"space-y-3\">\n            <h4 className=\"font-semibold text-dark-brown\" data-testid=\"stats-title\">\n              The Birthday Paradox\n            </h4>\n            <div className=\"bg-light-accent p-4 rounded-lg text-center\">\n              <div className=\"text-2xl font-bold text-coral-pink\">23 People</div>\n              <div className=\"text-sm text-gray-600\">50.7% chance of shared birthday</div>\n            </div>\n            <p className=\"text-xs text-gray-700 leading-relaxed\" data-testid=\"stats-explanation\">\n              In a room of just 23 people, there's a greater than 50% chance that two people share a birthday. \n              With 70 people, it's 99.9% certain! This seems counterintuitive because we think about the chance \n              of matching our specific birthday, not any two people matching.\n            </p>\n            <div className=\"text-xs text-coral-pink font-medium\">Math: 365!/((365-n)!×365^n)</div>\n          </div>\n        </Card>\n      </div>\n\n      <div className=\"grid md:grid-cols-3 gap-6\">\n        {/* Philosophy */}\n        <Card className=\"dashboard-card\">\n          <h3 className=\"subsection-title soft-purple-accent mb-4\">Thought Experiment</h3>\n          <div className=\"space-y-3\">\n            <h4 className=\"font-semibold text-dark-brown\" data-testid=\"philosophy-title\">\n              {philosophy.title}\n            </h4>\n            <p className=\"text-sm text-gray-700 leading-relaxed\" data-testid=\"philosophy-question\">\n              {philosophy.question}\n            </p>\n            <div className=\"text-xs text-soft-purple font-medium\" data-testid=\"philosophy-explores\">\n              Explores: {philosophy.explores}\n            </div>\n          </div>\n        </Card>\n\n        {/* Logical Fallacy */}\n        <Card className=\"dashboard-card\">\n          <h3 className=\"subsection-title sage-green-accent mb-4\">Logical Fallacy</h3>\n          <div className=\"space-y-3\">\n            <h4 className=\"font-semibold text-dark-brown\" data-testid=\"fallacy-name\">\n              {fallacy.name}\n            </h4>\n            <div className=\"bg-light-accent p-3 rounded-lg text-xs\" data-testid=\"fallacy-example\">\n              \"{fallacy.example}\"\n            </div>\n            <p className=\"text-xs text-gray-700\" data-testid=\"fallacy-explanation\">\n              {fallacy.explanation}\n            </p>\n          </div>\n        </Card>\n\n        {/* Cognitive Bias */}\n        <Card className=\"dashboard-card\">\n          <h3 className=\"subsection-title coral-pink-accent mb-4\">Bias Awareness</h3>\n          <div className=\"space-y-3\">\n            <h4 className=\"font-semibold text-dark-brown\" data-testid=\"bias-name\">\n              {bias.name}\n            </h4>\n            <p className=\"text-sm text-gray-700 leading-relaxed\" data-testid=\"bias-description\">\n              {bias.description}\n            </p>\n            <div className=\"bg-coral-pink bg-opacity-20 p-2 rounded text-xs text-white\" data-testid=\"bias-watch\">\n              <strong>Watch for:</strong> {bias.watchFor}\n            </div>\n          </div>\n        </Card>\n      </div>\n    </section>\n  );\n}\n","size_bytes":4987},"client/src/components/dashboard/ArtsCulture.tsx":{"content":"import { Card } from '@/components/ui/card';\nimport { getTodaysArtwork, getTodaysEtymology, getTodaysLiterature } from '@/lib/content-database';\n\nexport function ArtsCulture() {\n  const artwork = getTodaysArtwork();\n  const etymology = getTodaysEtymology();\n  const literature = getTodaysLiterature();\n\n  return (\n    <section className=\"space-y-6\">\n      <h2 className=\"section-title\">Arts & Culture</h2>\n      \n      <div className=\"space-y-6\">\n        {/* Art Spotlight */}\n        <Card className=\"dashboard-card\">\n          <h3 className=\"subsection-title soft-purple-accent mb-4\">Masterpiece Spotlight</h3>\n          <div className=\"grid md:grid-cols-3 gap-6\">\n            <div className=\"md:col-span-1\">\n              <img \n                src={artwork.imageUrl}\n                alt={artwork.title}\n                className=\"rounded-lg shadow-md w-full h-48 object-cover\"\n                data-testid=\"artwork-image\"\n              />\n            </div>\n            <div className=\"md:col-span-2 space-y-3\">\n              <h4 className=\"text-xl font-bold text-dark-brown\" data-testid=\"artwork-title\">\n                \"{artwork.title}\"\n              </h4>\n              <div className=\"text-sm text-gray-600\" data-testid=\"artwork-artist\">\n                {artwork.artist}\n              </div>\n              <p className=\"text-sm text-gray-700 leading-relaxed\" data-testid=\"artwork-description\">\n                {artwork.description}\n              </p>\n              <div className=\"text-xs text-soft-purple font-medium\" data-testid=\"artwork-location\">\n                Location: {artwork.location}\n              </div>\n            </div>\n          </div>\n        </Card>\n\n        <div className=\"grid md:grid-cols-2 gap-6\">\n          {/* Etymology */}\n          <Card className=\"dashboard-card\">\n            <h3 className=\"subsection-title coral-pink-accent mb-4\">Word Origins</h3>\n            <div className=\"space-y-3\">\n              <h4 className=\"text-xl font-bold text-dark-brown\" data-testid=\"etymology-word\">\n                {etymology.word}\n              </h4>\n              <div className=\"text-sm text-gray-600\" data-testid=\"etymology-pronunciation\">\n                {etymology.pronunciation}\n              </div>\n              <p className=\"text-sm text-gray-700 leading-relaxed\" data-testid=\"etymology-origin\">\n                {etymology.origin}\n              </p>\n              <div className=\"text-xs text-coral-pink font-medium\" data-testid=\"etymology-meaning\">\n                Meaning: {etymology.meaning}\n              </div>\n            </div>\n          </Card>\n\n          {/* Literature */}\n          <Card className=\"dashboard-card\">\n            <h3 className=\"subsection-title sky-blue-accent mb-4\">Literary Opening</h3>\n            <div className=\"space-y-3\">\n              <h4 className=\"text-lg font-bold text-dark-brown\" data-testid=\"literature-title\">\n                \"{literature.title}\"\n              </h4>\n              <div className=\"text-sm text-gray-600\" data-testid=\"literature-author\">\n                {literature.author}\n              </div>\n              <blockquote className=\"text-sm text-gray-700 leading-relaxed italic border-l-4 border-sky-blue pl-4\" data-testid=\"literature-opening\">\n                \"{literature.opening}\"\n              </blockquote>\n            </div>\n          </Card>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":3385},"client/src/components/dashboard/Closing.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { Card } from '@/components/ui/card';\nimport { fetchPrayerTimes } from '@/lib/api-services';\nimport { getTodaysJoke } from '@/lib/content-database';\n\nexport function Closing() {\n  const joke = getTodaysJoke();\n  \n  const { data: prayerTimes } = useQuery({\n    queryKey: ['/api/prayer-times'],\n    queryFn: () => fetchPrayerTimes(),\n    staleTime: 24 * 60 * 60 * 1000, // 24 hours\n  });\n\n  // Filter remaining prayer times (after current time)\n  const currentTime = new Date();\n  const currentHour = currentTime.getHours();\n  const remainingPrayers = prayerTimes?.filter(prayer => {\n    const prayerHour = parseInt(prayer.time.split(':')[0]);\n    const isPM = prayer.time.includes('PM');\n    const prayer24Hour = isPM && prayerHour !== 12 ? prayerHour + 12 : prayerHour;\n    return prayer24Hour > currentHour;\n  }) || [];\n\n  const getPrayerColor = (index: number) => {\n    const colors = ['text-coral-pink', 'text-soft-purple', 'text-sage-green'];\n    return colors[index % colors.length];\n  };\n\n  return (\n    <section className=\"space-y-6\">\n      <h2 className=\"section-title\">Closing Thoughts</h2>\n      \n      <div className=\"grid md:grid-cols-2 gap-6\">\n        {/* Daily Humor */}\n        <Card className=\"dashboard-card\">\n          <h3 className=\"subsection-title coral-pink-accent mb-4\">Daily Smile</h3>\n          <div className=\"space-y-3\">\n            <div className=\"bg-light-accent p-4 rounded-lg text-center\">\n              <p className=\"text-sm text-gray-700 font-medium\" data-testid=\"joke-setup\">\n                {joke.setup}\n              </p>\n              <p className=\"text-sm text-coral-pink font-semibold mt-2\" data-testid=\"joke-punchline\">\n                {joke.punchline}\n              </p>\n            </div>\n            <div className=\"text-xs text-gray-500 text-center\">Science humor to brighten your day ✨</div>\n          </div>\n        </Card>\n\n        {/* Prayer Times Reminder */}\n        <Card className=\"dashboard-card\">\n          <h3 className=\"subsection-title soft-purple-accent mb-4\">Prayer Times Reminder</h3>\n          <div className=\"space-y-2\">\n            <div className=\"flex justify-between items-center py-1\">\n              <span className=\"font-medium text-sage-green\">Remaining Today</span>\n              <span className=\"text-xs text-gray-500\">Vienna, VA</span>\n            </div>\n            {remainingPrayers.length > 0 ? (\n              remainingPrayers.map((prayer, index) => (\n                <div key={prayer.name} className=\"flex justify-between items-center py-1\" data-testid={`remaining-prayer-${prayer.name.toLowerCase()}`}>\n                  <span className={getPrayerColor(index)}>{prayer.name}</span>\n                  <span className=\"text-gray-600\">{prayer.time}</span>\n                </div>\n              ))\n            ) : (\n              <div className=\"text-gray-500 text-sm py-2\" data-testid=\"no-remaining-prayers\">\n                All prayers for today are complete\n              </div>\n            )}\n          </div>\n        </Card>\n      </div>\n\n      {/* Final Message */}\n      <div className=\"bg-gradient-to-r from-sky-blue to-sage-green bg-opacity-10 rounded-2xl p-6 text-center\" data-testid=\"final-message\">\n        <p className=\"text-dark-brown font-medium\">Have a purposeful and productive day! 🌟</p>\n        <p className=\"text-sm text-gray-600 mt-2\">Return tomorrow for new insights and challenges</p>\n      </div>\n    </section>\n  );\n}\n","size_bytes":3477},"client/src/components/dashboard/CulturalInsights.tsx":{"content":"import { Card } from '@/components/ui/card';\nimport { getTodaysCultural, getTodaysConsequences, getTodaysAltHistory } from '@/lib/content-database';\n\nexport function CulturalInsights() {\n  const cultural = getTodaysCultural();\n  const consequences = getTodaysConsequences();\n  const altHistory = getTodaysAltHistory();\n\n  const getBorderColor = (color: string) => {\n    const colorMap = {\n      'soft-purple': 'border-soft-purple',\n      'coral-pink': 'border-coral-pink',\n      'sage-green': 'border-sage-green',\n      'sky-blue': 'border-sky-blue'\n    };\n    return colorMap[color as keyof typeof colorMap] || 'border-gray-300';\n  };\n\n  const getTextColor = (color: string) => {\n    const colorMap = {\n      'soft-purple': 'text-soft-purple',\n      'coral-pink': 'text-coral-pink',\n      'sage-green': 'text-sage-green',\n      'sky-blue': 'text-sky-blue'\n    };\n    return colorMap[color as keyof typeof colorMap] || 'text-gray-700';\n  };\n\n  return (\n    <section className=\"space-y-6\">\n      <h2 className=\"section-title\">Cultural & Social Insights</h2>\n      \n      <div className=\"grid md:grid-cols-3 gap-6\">\n        {/* Cross-Cultural */}\n        <Card className=\"dashboard-card\">\n          <h3 className=\"subsection-title soft-purple-accent mb-4\">Cultural Solutions</h3>\n          <div className=\"space-y-3\">\n            <h4 className=\"font-semibold text-dark-brown\" data-testid=\"cultural-problem\">\n              {cultural.problem}\n            </h4>\n            <div className=\"space-y-2 text-xs\">\n              {cultural.solutions.map((solution, index) => (\n                <div key={index} className={`border-l-3 ${getBorderColor(solution.color)} pl-3`} data-testid={`cultural-solution-${index}`}>\n                  <strong className={getTextColor(solution.color)}>{solution.country}:</strong> {solution.approach}\n                </div>\n              ))}\n            </div>\n            <p className=\"text-xs text-gray-600\">Different cultures solve the same problem through their unique values and constraints.</p>\n          </div>\n        </Card>\n\n        {/* Unintended Consequences */}\n        <Card className=\"dashboard-card\">\n          <h3 className=\"subsection-title coral-pink-accent mb-4\">Unintended Effects</h3>\n          <div className=\"space-y-3\">\n            <h4 className=\"font-semibold text-dark-brown\" data-testid=\"consequences-case\">\n              {consequences.case}\n            </h4>\n            <p className=\"text-sm text-gray-700 leading-relaxed\" data-testid=\"consequences-story\">\n              {consequences.story}\n            </p>\n            <div className=\"text-xs text-coral-pink font-medium\" data-testid=\"consequences-lesson\">\n              Lesson: {consequences.lesson}\n            </div>\n          </div>\n        </Card>\n\n        {/* Alternative History */}\n        <Card className=\"dashboard-card\">\n          <h3 className=\"subsection-title sky-blue-accent mb-4\">What If...</h3>\n          <div className=\"space-y-3\">\n            <h4 className=\"font-semibold text-dark-brown\" data-testid=\"althistory-scenario\">\n              {altHistory.scenario}\n            </h4>\n            <p className=\"text-sm text-gray-700 leading-relaxed\" data-testid=\"althistory-speculation\">\n              {altHistory.speculation}\n            </p>\n            <div className=\"text-xs text-sky-blue font-medium\" data-testid=\"althistory-impact\">\n              Impact: {altHistory.impact}\n            </div>\n          </div>\n        </Card>\n      </div>\n    </section>\n  );\n}\n","size_bytes":3485},"client/src/components/dashboard/DailyPlanning.tsx":{"content":"import { useState } from 'react';\nimport { Card } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { useHabits, useDailyGoals } from '@/hooks/use-local-storage';\nimport { Plus, Trash2 } from 'lucide-react';\n\nexport function DailyPlanning() {\n  const { habits, toggleHabit, addHabit, deleteHabit } = useHabits();\n  const { goals, lastUpdated, updateGoals, yesterdaysGoals } = useDailyGoals();\n  const [newHabitName, setNewHabitName] = useState('');\n  const [showAddHabit, setShowAddHabit] = useState(false);\n\n  const handleAddHabit = () => {\n    if (newHabitName.trim()) {\n      addHabit(newHabitName.trim());\n      setNewHabitName('');\n      setShowAddHabit(false);\n    }\n  };\n\n  const getHabitColor = (index: number) => {\n    const colors = ['sky-blue', 'coral-pink', 'sage-green', 'soft-purple'];\n    return colors[index % colors.length];\n  };\n\n  return (\n    <section className=\"space-y-6\">\n      <h2 className=\"section-title\">Daily Planning</h2>\n      \n      <div className=\"grid md:grid-cols-2 gap-6\">\n        {/* Habit Tracker */}\n        <Card className=\"dashboard-card\">\n          <h3 className=\"subsection-title mb-4\">Habit Tracker</h3>\n          <div className=\"space-y-3\">\n            {habits.map((habit, index) => (\n              <div key={habit.id} className=\"flex items-center space-x-3\" data-testid={`habit-${habit.id}`}>\n                <Checkbox\n                  checked={habit.completed}\n                  onCheckedChange={() => toggleHabit(habit.id)}\n                  className={`w-5 h-5 data-[state=checked]:bg-${getHabitColor(index)} data-[state=checked]:border-${getHabitColor(index)}`}\n                  data-testid={`habit-checkbox-${habit.id}`}\n                />\n                <span className=\"flex-1\">{habit.name}</span>\n                <span className=\"text-sm text-gray-500\" data-testid={`habit-streak-${habit.id}`}>\n                  {habit.streak} day streak\n                </span>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => deleteHabit(habit.id)}\n                  className=\"p-1 hover:bg-red-100 hover:text-red-600 text-gray-400\"\n                  data-testid={`habit-delete-${habit.id}`}\n                >\n                  <Trash2 className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            ))}\n            \n            {showAddHabit ? (\n              <div className=\"flex items-center space-x-3 mt-4\">\n                <input\n                  type=\"text\"\n                  value={newHabitName}\n                  onChange={(e) => setNewHabitName(e.target.value)}\n                  placeholder=\"Enter habit name\"\n                  className=\"flex-1 px-3 py-2 border border-gray-200 rounded-lg focus:ring-2 focus:ring-sky-blue focus:border-transparent text-sm\"\n                  onKeyPress={(e) => e.key === 'Enter' && handleAddHabit()}\n                  autoFocus\n                  data-testid=\"habit-input\"\n                />\n                <Button onClick={handleAddHabit} className=\"btn-sky-blue\" size=\"sm\" data-testid=\"habit-save\">\n                  Add\n                </Button>\n                <Button onClick={() => setShowAddHabit(false)} variant=\"outline\" size=\"sm\" data-testid=\"habit-cancel\">\n                  Cancel\n                </Button>\n              </div>\n            ) : (\n              <Button\n                onClick={() => setShowAddHabit(true)}\n                variant=\"ghost\"\n                className=\"mt-4 text-sky-blue text-sm font-medium hover:text-opacity-80\"\n                data-testid=\"add-habit\"\n              >\n                <Plus className=\"w-4 h-4 mr-1\" />\n                Add habit\n              </Button>\n            )}\n          </div>\n        </Card>\n\n        {/* Daily Goals */}\n        <Card className=\"dashboard-card\">\n          <h3 className=\"subsection-title mb-4\">Today's Goals</h3>\n          <div className=\"space-y-4\">\n            <Textarea\n              value={goals}\n              onChange={(e) => updateGoals(e.target.value)}\n              className=\"w-full p-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-sky-blue focus:border-transparent resize-none\"\n              rows={4}\n              placeholder=\"What do you want to achieve today?\"\n              data-testid=\"daily-goals\"\n            />\n            <div className=\"flex justify-between text-sm text-gray-500\">\n              <span data-testid=\"goals-last-updated\">\n                {lastUpdated ? `Last updated: ${lastUpdated}` : 'Not saved yet'}\n              </span>\n              <span>Auto-saved</span>\n            </div>\n            \n            {yesterdaysGoals && (\n              <div className=\"pt-4 border-t border-gray-100\">\n                <h4 className=\"text-sm font-medium text-gray-700 mb-2\">Yesterday's Goals</h4>\n                <div className=\"bg-gray-50 p-3 rounded-lg text-sm text-gray-600\" data-testid=\"yesterday-goals\">\n                  {yesterdaysGoals}\n                </div>\n              </div>\n            )}\n          </div>\n        </Card>\n      </div>\n    </section>\n  );\n}\n","size_bytes":5207},"client/src/components/dashboard/HistoricalKnowledge.tsx":{"content":"import { Card } from '@/components/ui/card';\nimport { getTodaysHistoryEvents, getTodaysHistoricalFigure } from '@/lib/content-database';\n\nexport function HistoricalKnowledge() {\n  const events = getTodaysHistoryEvents();\n  const figure = getTodaysHistoricalFigure();\n  const currentDate = new Date().toLocaleDateString('en-US', { month: 'long', day: 'numeric' });\n\n  const getEventColor = (index: number) => {\n    const colors = ['border-sky-blue', 'border-coral-pink', 'border-sage-green'];\n    return colors[index % colors.length];\n  };\n\n  return (\n    <section className=\"space-y-6\">\n      <h2 className=\"section-title\">Historical Knowledge</h2>\n      \n      <div className=\"grid md:grid-cols-2 gap-6\">\n        {/* This Day in History */}\n        <Card className=\"dashboard-card\">\n          <h3 className=\"subsection-title sky-blue-accent mb-4\">{currentDate} in History</h3>\n          <div className=\"space-y-4\">\n            {events.map((event, index) => (\n              <div key={index} className={`border-l-4 ${getEventColor(index)} pl-4`} data-testid={`history-event-${index}`}>\n                <div className=\"font-semibold text-dark-brown\">{event.year}</div>\n                <p className=\"text-sm text-gray-700\">{event.description}</p>\n              </div>\n            ))}\n          </div>\n        </Card>\n\n        {/* Historical Figure */}\n        <Card className=\"dashboard-card\">\n          <h3 className=\"subsection-title soft-purple-accent mb-4\">Historical Figure Spotlight</h3>\n          <div className=\"space-y-3\">\n            <h4 className=\"text-xl font-bold text-dark-brown\" data-testid=\"figure-name\">\n              {figure.name}\n            </h4>\n            <div className=\"text-sm text-gray-600\" data-testid=\"figure-dates\">\n              {figure.dates}\n            </div>\n            <p className=\"text-sm text-gray-700 leading-relaxed\" data-testid=\"figure-biography\">\n              {figure.biography}\n            </p>\n            <div className=\"text-xs text-sky-blue font-medium\" data-testid=\"figure-notable\">\n              Notable: {figure.notable}\n            </div>\n          </div>\n        </Card>\n      </div>\n    </section>\n  );\n}\n","size_bytes":2158},"client/src/components/dashboard/Innovation.tsx":{"content":"import { useState } from 'react';\nimport { Card } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { getTodaysInnovation, getTodaysDesign, getTodaysInvention } from '@/lib/content-database';\nimport { Lightbulb } from 'lucide-react';\n\nexport function Innovation() {\n  const innovation = getTodaysInnovation();\n  const design = getTodaysDesign();\n  const invention = getTodaysInvention();\n\n  return (\n    <section className=\"space-y-6\">\n      <h2 className=\"section-title\">Innovation & Design</h2>\n      \n      <div className=\"grid md:grid-cols-3 gap-6\">\n        {/* Engineering Challenge */}\n        <Card className=\"dashboard-card\">\n          <h3 className=\"subsection-title sky-blue-accent mb-4\">Engineering Problem</h3>\n          <div className=\"space-y-3\">\n            <div className=\"bg-light-accent p-4 rounded-lg\">\n              <p className=\"text-sm text-gray-700 font-medium\" data-testid=\"innovation-challenge\">\n                {innovation.challenge}\n              </p>\n            </div>\n            <div className=\"bg-sky-blue bg-opacity-10 p-3 rounded-lg text-xs text-gray-700\" data-testid=\"innovation-solution\">\n              <strong>Solution:</strong> {innovation.solution}\n            </div>\n          </div>\n        </Card>\n\n        {/* Design Principle */}\n        <Card className=\"dashboard-card\">\n          <h3 className=\"subsection-title coral-pink-accent mb-4\">Design Excellence</h3>\n          <div className=\"space-y-3\">\n            <h4 className=\"font-semibold text-dark-brown\" data-testid=\"design-example\">\n              {design.example}\n            </h4>\n            <p className=\"text-sm text-gray-700 leading-relaxed\" data-testid=\"design-details\">\n              Perfect example of <strong>{design.principle}</strong>—{design.details}\n            </p>\n            <div className=\"text-xs text-coral-pink font-medium\" data-testid=\"design-principle\">\n              Principle: {design.principle}\n            </div>\n          </div>\n        </Card>\n\n        {/* Invention Story */}\n        <Card className=\"dashboard-card\">\n          <h3 className=\"subsection-title sage-green-accent mb-4\">Invention Necessity</h3>\n          <div className=\"space-y-3\">\n            <h4 className=\"font-semibold text-dark-brown\" data-testid=\"invention-item\">\n              {invention.item}\n            </h4>\n            <p className=\"text-sm text-gray-700 leading-relaxed\" data-testid=\"invention-story\">\n              {invention.story}\n            </p>\n            <div className=\"text-xs text-sage-green font-medium\" data-testid=\"invention-lesson\">\n              Lesson: {invention.lesson}\n            </div>\n          </div>\n        </Card>\n      </div>\n    </section>\n  );\n}\n","size_bytes":2719},"client/src/components/dashboard/InteractiveChallenges.tsx":{"content":"import { useState } from 'react';\nimport { Card } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { getTodaysPuzzle } from '@/lib/content-database';\nimport { Eye, Lightbulb, Cog } from 'lucide-react';\n\nexport function InteractiveChallenges() {\n  const [geographyRevealed, setGeographyRevealed] = useState(false);\n  const [chessRevealed, setChessRevealed] = useState(false);\n  const [logicRevealed, setLogicRevealed] = useState(false);\n  \n  const puzzle = getTodaysPuzzle();\n\n  return (\n    <section className=\"space-y-6\">\n      <h2 className=\"section-title\">Interactive Challenges</h2>\n      \n      <div className=\"grid md:grid-cols-2 gap-6\">\n        {/* Geography Challenge */}\n        <Card className=\"dashboard-card\">\n          <h3 className=\"subsection-title sky-blue-accent mb-4\">Geography Challenge</h3>\n          <div className=\"space-y-4\">\n            <div className=\"relative\">\n              <img \n                src=\"https://images.unsplash.com/photo-1506905925346-21bda4d32df4?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&h=400\"\n                alt=\"Mountain landscape with traditional buildings\"\n                className=\"rounded-lg w-full h-40 object-cover\"\n              />\n              {!geographyRevealed && (\n                <button \n                  onClick={() => setGeographyRevealed(true)}\n                  className=\"absolute inset-0 bg-black bg-opacity-20 hover:bg-opacity-10 transition-all duration-200 rounded-lg flex items-center justify-center\"\n                  data-testid=\"geography-reveal\"\n                >\n                  <span className=\"bg-white bg-opacity-90 text-dark-brown px-4 py-2 rounded-lg font-medium flex items-center gap-2\">\n                    <Eye className=\"w-4 h-4\" />\n                    Reveal Location\n                  </span>\n                </button>\n              )}\n            </div>\n            <p className=\"text-sm text-gray-600\">Can you identify this culturally significant location?</p>\n            {geographyRevealed && (\n              <div className=\"bg-sage-green bg-opacity-10 p-3 rounded-lg\" data-testid=\"geography-answer\">\n                <div className=\"font-semibold text-sage-green\">Bhutan - Tiger's Nest Monastery</div>\n                <p className=\"text-xs text-gray-700\">Sacred Buddhist site built into a cliff face at 10,000 feet elevation</p>\n              </div>\n            )}\n          </div>\n        </Card>\n\n        {/* Chess Puzzle */}\n        <Card className=\"dashboard-card\">\n          <h3 className=\"subsection-title coral-pink-accent mb-4\">Chess Position</h3>\n          <div className=\"space-y-4\">\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm text-gray-600\">White to move</span>\n              <span className=\"bg-coral-pink text-white px-2 py-1 rounded text-xs\">Difficulty: 6/10</span>\n            </div>\n            <div className=\"aspect-square bg-gray-100 rounded-lg flex items-center justify-center\" data-testid=\"chess-board\">\n              <div className=\"text-gray-500 text-center\">\n                <div className=\"text-4xl mb-2\">♔♕♖♗♘♙</div>\n                <div>Chess Position</div>\n                <div className=\"text-sm\">Interactive board coming soon</div>\n              </div>\n            </div>\n            <Button \n              onClick={() => setChessRevealed(true)}\n              className=\"w-full btn-coral-pink\"\n              disabled={chessRevealed}\n              data-testid=\"chess-reveal\"\n            >\n              {chessRevealed ? 'Solution Revealed' : 'Show Best Move'}\n            </Button>\n            {chessRevealed && (\n              <div className=\"bg-coral-pink bg-opacity-20 p-3 rounded-lg\" data-testid=\"chess-solution\">\n                <div className=\"font-semibold text-white\">Best Move: Qh5+</div>\n                <p className=\"text-xs text-gray-100\">This creates a fork, attacking both the king and rook</p>\n              </div>\n            )}\n          </div>\n        </Card>\n      </div>\n\n      <div className=\"grid md:grid-cols-2 gap-6\">\n        {/* Logic Puzzle */}\n        <Card className=\"dashboard-card\">\n          <h3 className=\"subsection-title soft-purple-accent mb-4\">Logic Puzzle</h3>\n          <div className=\"space-y-3\">\n            <div className=\"bg-light-accent p-4 rounded-lg\">\n              <p className=\"text-sm text-gray-700 leading-relaxed\" data-testid=\"logic-question\">\n                {puzzle.question}\n              </p>\n            </div>\n            <Button\n              onClick={() => setLogicRevealed(true)}\n              variant=\"ghost\"\n              className=\"text-soft-purple text-sm font-medium hover:text-opacity-80\"\n              disabled={logicRevealed}\n              data-testid=\"logic-reveal\"\n            >\n              <Lightbulb className=\"w-4 h-4 mr-1\" />\n              {logicRevealed ? 'Solution Revealed' : 'Show Solution'}\n            </Button>\n            {logicRevealed && (\n              <div className=\"bg-soft-purple bg-opacity-10 p-3 rounded-lg text-xs text-gray-700\" data-testid=\"logic-solution\">\n                {puzzle.solution}\n              </div>\n            )}\n          </div>\n        </Card>\n\n        {/* Reverse Engineering */}\n        <Card className=\"dashboard-card\">\n          <h3 className=\"subsection-title sage-green-accent mb-4\">How Does It Work?</h3>\n          <div className=\"space-y-3\">\n            <div className=\"text-center\">\n              <Cog className=\"w-16 h-16 text-sage-green mx-auto mb-2\" />\n              <h4 className=\"font-semibold text-dark-brown\" data-testid=\"engineering-item\">\n                Mercury Thermometer\n              </h4>\n            </div>\n            <p className=\"text-sm text-gray-600 text-center\">How does this device measure temperature so accurately?</p>\n            <div className=\"bg-sage-green bg-opacity-10 p-3 rounded-lg text-xs text-gray-700\" data-testid=\"engineering-solution\">\n              Mercury expands predictably when heated and contracts when cooled. The narrow glass tube amplifies \n              this tiny volume change into visible movement. The uniform expansion rate allows precise calibration \n              against known temperature points (water freezing/boiling).\n            </div>\n          </div>\n        </Card>\n      </div>\n    </section>\n  );\n}\n","size_bytes":6367},"client/src/components/dashboard/LanguageLearning.tsx":{"content":"import { Card } from '@/components/ui/card';\nimport { getTodaysFrenchNouns, getTodaysFrenchVerb, getTodaysGrammarLesson } from '@/lib/content-database';\n\nexport function LanguageLearning() {\n  const nouns = getTodaysFrenchNouns();\n  const verb = getTodaysFrenchVerb();\n  const grammar = getTodaysGrammarLesson();\n\n  return (\n    <section className=\"space-y-6\">\n      <h2 className=\"section-title\">French Learning</h2>\n      \n      <div className=\"grid md:grid-cols-3 gap-6\">\n        {/* Vocabulary */}\n        <Card className=\"dashboard-card\">\n          <h3 className=\"subsection-title soft-purple-accent mb-4\">Daily Vocabulary</h3>\n          <div className=\"space-y-4\">\n            {nouns.map((noun, index) => (\n              <div key={index} className=\"p-3 bg-light-accent rounded-lg\" data-testid={`french-noun-${index}`}>\n                <div className=\"font-semibold text-dark-brown\">{noun.french}</div>\n                <div className=\"text-sm text-gray-600\">{noun.english}</div>\n                <div className=\"text-xs text-gray-500 mt-1\">\"{noun.example}\"</div>\n              </div>\n            ))}\n          </div>\n        </Card>\n\n        {/* Verb Conjugation */}\n        <Card className=\"dashboard-card\">\n          <h3 className=\"subsection-title coral-pink-accent mb-4\">{verb.verb}</h3>\n          <div className=\"space-y-2\">\n            <div className=\"flex justify-between\" data-testid=\"conjugation-je\">\n              <span className=\"text-gray-600\">je</span>\n              <span className=\"font-medium\">{verb.conjugations.je}</span>\n            </div>\n            <div className=\"flex justify-between\" data-testid=\"conjugation-tu\">\n              <span className=\"text-gray-600\">tu</span>\n              <span className=\"font-medium\">{verb.conjugations.tu}</span>\n            </div>\n            <div className=\"flex justify-between\" data-testid=\"conjugation-il\">\n              <span className=\"text-gray-600\">il/elle</span>\n              <span className=\"font-medium\">{verb.conjugations.il}</span>\n            </div>\n            <div className=\"flex justify-between\" data-testid=\"conjugation-nous\">\n              <span className=\"text-gray-600\">nous</span>\n              <span className=\"font-medium\">{verb.conjugations.nous}</span>\n            </div>\n            <div className=\"flex justify-between\" data-testid=\"conjugation-vous\">\n              <span className=\"text-gray-600\">vous</span>\n              <span className=\"font-medium\">{verb.conjugations.vous}</span>\n            </div>\n            <div className=\"flex justify-between\" data-testid=\"conjugation-ils\">\n              <span className=\"text-gray-600\">ils/elles</span>\n              <span className=\"font-medium\">{verb.conjugations.ils}</span>\n            </div>\n          </div>\n        </Card>\n\n        {/* Grammar Lesson */}\n        <Card className=\"dashboard-card\">\n          <h3 className=\"subsection-title sage-green-accent mb-4\">Grammar Tip</h3>\n          <div className=\"space-y-3\">\n            <h4 className=\"font-semibold text-dark-brown\" data-testid=\"grammar-title\">\n              {grammar.title}\n            </h4>\n            <p className=\"text-sm text-gray-700\" data-testid=\"grammar-explanation\">\n              {grammar.explanation}\n            </p>\n            <div className=\"text-xs text-gray-600 bg-light-accent p-2 rounded\" data-testid=\"grammar-example\">\n              <strong>Example:</strong> {grammar.example}\n            </div>\n          </div>\n        </Card>\n      </div>\n    </section>\n  );\n}\n","size_bytes":3489},"client/src/components/dashboard/MorningCentering.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { Card } from '@/components/ui/card';\nimport { BreathingExercise } from '@/components/ui/breathing-exercise';\nimport { fetchWeather, fetchPrayerTimes } from '@/lib/api-services';\nimport { Cloud, CloudRain, Snowflake, Sun } from 'lucide-react';\nimport mosqueImage from '@assets/image_1755961309570.png';\n\nexport function MorningCentering() {\n  const { data: weather, isLoading: weatherLoading, error: weatherError } = useQuery({\n    queryKey: ['/api/weather'],\n    queryFn: () => fetchWeather(),\n    staleTime: 10 * 60 * 1000, // 10 minutes\n  });\n\n  const { data: prayerTimes, isLoading: prayerLoading, error: prayerError } = useQuery({\n    queryKey: ['/api/prayer-times'],\n    queryFn: () => fetchPrayerTimes(),\n    staleTime: 24 * 60 * 60 * 1000, // 24 hours\n  });\n\n  const getWeatherIcon = (condition: string) => {\n    const lower = condition.toLowerCase();\n    if (lower.includes('rain')) return <CloudRain className=\"text-sky-blue\" />;\n    if (lower.includes('snow')) return <Snowflake className=\"text-soft-purple\" />;\n    if (lower.includes('cloud')) return <Cloud className=\"text-sky-blue\" />;\n    return <Sun className=\"text-coral-pink\" />;\n  };\n\n  const getPrayerColor = (index: number) => {\n    const colors = ['text-sage-green', 'text-sky-blue', 'text-coral-pink', 'text-soft-purple', 'text-sage-green'];\n    return colors[index % colors.length];\n  };\n\n  const getWindDirection = (degrees: number): string => {\n    const directions = ['N', 'NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S', 'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW'];\n    const index = Math.round(degrees / 22.5) % 16;\n    return directions[index];\n  };\n\n  return (\n    <section className=\"space-y-6\">\n      <h2 className=\"section-title\">Morning Centering</h2>\n      \n      {/* Box Breathing */}\n      <Card className=\"dashboard-card\">\n        <BreathingExercise />\n      </Card>\n\n      {/* Weather & Prayer Times */}\n      <div className=\"grid md:grid-cols-2 gap-6\">\n        {/* Weather */}\n        <Card className=\"dashboard-card\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"subsection-title\">Vienna, VA Weather</h3>\n            {weather && getWeatherIcon(weather.current.condition)}\n          </div>\n          \n          {weatherLoading && (\n            <div className=\"animate-pulse space-y-3\">\n              <div className=\"h-8 bg-gray-200 rounded w-1/2\"></div>\n              <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n              <div className=\"grid grid-cols-3 gap-3 pt-3\">\n                <div className=\"h-12 bg-gray-200 rounded\"></div>\n                <div className=\"h-12 bg-gray-200 rounded\"></div>\n                <div className=\"h-12 bg-gray-200 rounded\"></div>\n              </div>\n            </div>\n          )}\n          \n          {weatherError && (\n            <div className=\"text-red-500 text-sm\" data-testid=\"weather-error\">\n              Unable to load weather data. Please check your internet connection.\n            </div>\n          )}\n          \n          {weather && (\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-2xl font-semibold\" data-testid=\"current-temp\">\n                  {weather.current.temp}°F\n                </span>\n                <span className=\"text-gray-600\" data-testid=\"current-condition\">\n                  {weather.current.condition}\n                </span>\n              </div>\n              \n              {/* Current Conditions Detail */}\n              <div className=\"space-y-3 text-sm\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <span className=\"text-gray-600\">High: </span>\n                    <span className=\"font-medium\">{weather.current.high}°F at {weather.current.highTime}</span>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-600\">Low: </span>\n                    <span className=\"font-medium\">{weather.current.low}°F at {weather.current.lowTime}</span>\n                  </div>\n                </div>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <span className=\"text-gray-600\">Humidity: </span>\n                    <span className=\"font-medium\">{weather.current.humidity}%</span>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-600\">Wind: </span>\n                    <span className=\"font-medium\">{weather.current.windSpeed} mph {getWindDirection(weather.current.windDirection)} at {weather.current.windHighTime}</span>\n                  </div>\n                </div>\n              </div>\n              \n              {/* Tomorrow's Forecast */}\n              {weather.forecast.length > 0 && (\n                <div className=\"pt-3 border-t border-gray-100\">\n                  <div className=\"text-center p-3 bg-gray-50 rounded-lg\" data-testid=\"forecast-tomorrow\">\n                    <div className=\"text-sm font-medium text-gray-700 mb-2\">{weather.forecast[0].name}</div>\n                    {getWeatherIcon(weather.forecast[0].icon)}\n                    <div className=\"text-sm mt-2 space-y-1\">\n                      <div className=\"font-medium\">{weather.forecast[0].temp}°F</div>\n                      <div className=\"text-xs text-gray-500\">H: {weather.forecast[0].high}° at {weather.forecast[0].highTime}</div>\n                      <div className=\"text-xs text-gray-500\">L: {weather.forecast[0].low}° at {weather.forecast[0].lowTime}</div>\n                      <div className=\"text-xs text-gray-500\">💧 H: {weather.forecast[0].humidity}% at {weather.forecast[0].humidityHighTime}</div>\n                      <div className=\"text-xs text-gray-500\">💨 {weather.forecast[0].windSpeed} mph {getWindDirection(weather.forecast[0].windDirection)} at {weather.forecast[0].windHighTime}</div>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n        </Card>\n\n        {/* Prayer Times */}\n        <Card className=\"dashboard-card\">\n          <div className=\"p-6\">\n            <h3 className=\"subsection-title mb-4 text-dark-brown font-semibold\">Prayer Times Today</h3>\n          \n          {prayerLoading && (\n            <div className=\"animate-pulse space-y-2\">\n              {[...Array(5)].map((_, i) => (\n                <div key={i} className=\"flex justify-between py-1\">\n                  <div className=\"h-4 bg-gray-200 rounded w-1/3\"></div>\n                  <div className=\"h-4 bg-gray-200 rounded w-1/4\"></div>\n                </div>\n              ))}\n            </div>\n          )}\n          \n          {prayerError && (\n            <div className=\"text-red-500 text-sm\" data-testid=\"prayer-error\">\n              Unable to load prayer times. Please check your internet connection.\n            </div>\n          )}\n          \n          {prayerTimes && (\n            <div className=\"space-y-2\">\n              {prayerTimes.map((prayer, index) => (\n                <div key={prayer.name} className=\"flex justify-between items-center py-1\" data-testid={`prayer-${prayer.name.toLowerCase()}`}>\n                  <span className={`font-semibold ${getPrayerColor(index)}`}>\n                    {prayer.name}\n                  </span>\n                  <span className=\"text-dark-brown font-medium\">{prayer.time}</span>\n                </div>\n              ))}\n            </div>\n          )}\n          \n          {/* Mosque Image */}\n          <div className=\"mt-4 border-t border-gray-100 pt-4\">\n            <img \n              src={mosqueImage}\n              alt=\"Green dome of Prophet's Mosque in Medina through ornate window\"\n              className=\"w-full h-32 object-cover rounded-lg\"\n            />\n          </div>\n          </div>\n        </Card>\n      </div>\n    </section>\n  );\n}\n","size_bytes":7949},"client/src/components/dashboard/NaturePractical.tsx":{"content":"import { Card } from '@/components/ui/card';\nimport { Leaf, Snowflake, Sprout } from 'lucide-react';\n\nexport function NaturePractical() {\n  const currentMonth = new Date().toLocaleDateString('en-US', { month: 'long' });\n\n  return (\n    <section className=\"space-y-6\">\n      <h2 className=\"section-title\">Nature & Seasonal Life</h2>\n      \n      <Card className=\"dashboard-card\">\n        <h3 className=\"subsection-title sage-green-accent mb-4\">{currentMonth} in Virginia Gardens</h3>\n        <div className=\"grid md:grid-cols-2 gap-6\">\n          <div className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <h4 className=\"font-semibold text-dark-brown\">What's Happening Now</h4>\n              <ul className=\"text-sm text-gray-700 space-y-1\">\n                <li className=\"flex items-center\" data-testid=\"nature-fact-1\">\n                  <Leaf className=\"w-4 h-4 text-sage-green mr-2 flex-shrink-0\" />\n                  Trees are dormant, storing energy for spring\n                </li>\n                <li className=\"flex items-center\" data-testid=\"nature-fact-2\">\n                  <Snowflake className=\"w-4 h-4 text-sky-blue mr-2 flex-shrink-0\" />\n                  Soil preparation time for spring planting\n                </li>\n                <li className=\"flex items-center\" data-testid=\"nature-fact-3\">\n                  <Sprout className=\"w-4 h-4 text-coral-pink mr-2 flex-shrink-0\" />\n                  Indoor seed starting for tomatoes and peppers\n                </li>\n              </ul>\n            </div>\n          </div>\n          <div className=\"space-y-4\">\n            <div className=\"space-y-3\">\n              <div className=\"bg-sage-green bg-opacity-10 p-3 rounded-lg\" data-testid=\"task-planning\">\n                <h5 className=\"font-medium text-sage-green text-sm\">Plan Your Garden</h5>\n                <p className=\"text-xs text-gray-600\">Order seeds, sketch layouts, research new varieties for this year's growing season.</p>\n              </div>\n              <div className=\"bg-sky-blue bg-opacity-10 p-3 rounded-lg\" data-testid=\"task-wildlife\">\n                <h5 className=\"font-medium text-sky-blue text-sm\">Wildlife Support</h5>\n                <p className=\"text-xs text-gray-600\">Keep bird feeders full and provide unfrozen water sources for winter wildlife.</p>\n              </div>\n              <div className=\"bg-coral-pink bg-opacity-20 p-3 rounded-lg\" data-testid=\"task-indoor\">\n                <h5 className=\"font-medium text-white text-sm\">Indoor Plants</h5>\n                <p className=\"text-xs text-gray-100\">Reduce watering and fertilizing. Most houseplants are dormant now.</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </Card>\n    </section>\n  );\n}\n","size_bytes":2753},"client/src/components/dashboard/NewsSection.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { Card } from '@/components/ui/card';\nimport { fetchNews } from '@/lib/api-services';\nimport { ExternalLink } from 'lucide-react';\n\nexport function NewsSection() {\n  const { data: news, isLoading, error } = useQuery({\n    queryKey: ['/api/news'],\n    queryFn: fetchNews,\n    staleTime: 30 * 60 * 1000, // 30 minutes\n  });\n\n  if (isLoading) {\n    return (\n      <section className=\"space-y-6\">\n        <h2 className=\"section-title\">Current Events</h2>\n        <Card className=\"dashboard-card\">\n          <div className=\"grid md:grid-cols-3 gap-6\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"animate-pulse\">\n                <div className=\"h-6 bg-gray-200 rounded w-1/2 mb-3\"></div>\n                <div className=\"space-y-3\">\n                  {[...Array(3)].map((_, j) => (\n                    <div key={j} className=\"border-l-2 border-gray-200 pl-3\">\n                      <div className=\"h-4 bg-gray-200 rounded\"></div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </div>\n        </Card>\n      </section>\n    );\n  }\n\n  if (error) {\n    return (\n      <section className=\"space-y-6\">\n        <h2 className=\"section-title\">Current Events</h2>\n        <Card className=\"dashboard-card\">\n          <div className=\"text-red-500 text-sm text-center py-8\" data-testid=\"news-error\">\n            Unable to load news. Please check your internet connection.\n          </div>\n        </Card>\n      </section>\n    );\n  }\n\n  return (\n    <section className=\"space-y-6\">\n      <h2 className=\"section-title\">Current Events</h2>\n      \n      <Card className=\"dashboard-card\">\n        <div className=\"grid md:grid-cols-3 gap-6\">\n          {/* International */}\n          <div>\n            <h3 className=\"subsection-title coral-pink-accent mb-3\">International</h3>\n            <div className=\"space-y-3\">\n              {news?.international.map((article, index) => (\n                <div key={index} className=\"border-l-2 border-coral-pink pl-3\" data-testid={`intl-article-${index}`}>\n                  <a \n                    href={article.url}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"text-sm font-medium text-dark-brown hover:text-coral-pink transition-colors flex items-start gap-1\"\n                  >\n                    {article.title}\n                    <ExternalLink className=\"w-3 h-3 mt-0.5 flex-shrink-0\" />\n                  </a>\n                </div>\n              )) || (\n                <div className=\"text-gray-500 text-sm\">No international news available</div>\n              )}\n            </div>\n          </div>\n\n          {/* US News */}\n          <div>\n            <h3 className=\"subsection-title sky-blue-accent mb-3\">United States</h3>\n            <div className=\"space-y-3\">\n              {news?.us.map((article, index) => (\n                <div key={index} className=\"border-l-2 border-sky-blue pl-3\" data-testid={`us-article-${index}`}>\n                  <a \n                    href={article.url}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"text-sm font-medium text-dark-brown hover:text-sky-blue transition-colors flex items-start gap-1\"\n                  >\n                    {article.title}\n                    <ExternalLink className=\"w-3 h-3 mt-0.5 flex-shrink-0\" />\n                  </a>\n                </div>\n              )) || (\n                <div className=\"text-gray-500 text-sm\">No US news available</div>\n              )}\n            </div>\n          </div>\n\n          {/* Business */}\n          <div>\n            <h3 className=\"subsection-title sage-green-accent mb-3\">Business</h3>\n            <div className=\"space-y-3\">\n              {news?.business.map((article, index) => (\n                <div key={index} className=\"border-l-2 border-sage-green pl-3\" data-testid={`business-article-${index}`}>\n                  <a \n                    href={article.url}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"text-sm font-medium text-dark-brown hover:text-sage-green transition-colors flex items-start gap-1\"\n                  >\n                    {article.title}\n                    <ExternalLink className=\"w-3 h-3 mt-0.5 flex-shrink-0\" />\n                  </a>\n                </div>\n              )) || (\n                <div className=\"text-gray-500 text-sm\">No business news available</div>\n              )}\n            </div>\n          </div>\n        </div>\n      </Card>\n    </section>\n  );\n}\n","size_bytes":4710},"client/src/components/dashboard/ScienceMath.tsx":{"content":"import { Card } from '@/components/ui/card';\nimport { getTodaysScienceFact, getTodaysMathConcept, getTodaysNeuroFact } from '@/lib/content-database';\n\nexport function ScienceMath() {\n  const science = getTodaysScienceFact();\n  const math = getTodaysMathConcept();\n  const neuro = getTodaysNeuroFact();\n\n  return (\n    <section className=\"space-y-6\">\n      <h2 className=\"section-title\">Science & Mathematics</h2>\n      \n      <div className=\"grid md:grid-cols-3 gap-6\">\n        {/* Scientific Fact */}\n        <Card className=\"dashboard-card\">\n          <h3 className=\"subsection-title coral-pink-accent mb-4\">Scientific Wonder</h3>\n          <div className=\"space-y-3\">\n            <h4 className=\"font-semibold text-dark-brown\" data-testid=\"science-title\">\n              {science.title}\n            </h4>\n            <p className=\"text-sm text-gray-700 leading-relaxed\" data-testid=\"science-explanation\">\n              {science.explanation}\n            </p>\n            <div className=\"text-xs text-coral-pink font-medium\" data-testid=\"science-field\">\n              Field: {science.field}\n            </div>\n          </div>\n        </Card>\n\n        {/* Mathematical Concept */}\n        <Card className=\"dashboard-card\">\n          <h3 className=\"subsection-title sky-blue-accent mb-4\">Math Concept</h3>\n          <div className=\"space-y-3\">\n            <h4 className=\"font-semibold text-dark-brown\" data-testid=\"math-title\">\n              {math.title}\n            </h4>\n            <p className=\"text-sm text-gray-700 leading-relaxed\" data-testid=\"math-explanation\">\n              {math.explanation}\n            </p>\n            {math.formula && (\n              <div className=\"bg-light-accent p-3 rounded-lg text-center font-mono text-sm\" data-testid=\"math-formula\">\n                {math.formula}\n              </div>\n            )}\n          </div>\n        </Card>\n\n        {/* Neuroscience Nugget */}\n        <Card className=\"dashboard-card\">\n          <h3 className=\"subsection-title sage-green-accent mb-4\">Brain Science</h3>\n          <div className=\"space-y-3\">\n            <h4 className=\"font-semibold text-dark-brown\" data-testid=\"neuro-title\">\n              {neuro.title}\n            </h4>\n            <p className=\"text-sm text-gray-700 leading-relaxed\" data-testid=\"neuro-explanation\">\n              {neuro.explanation}\n            </p>\n            <div className=\"text-xs text-sage-green font-medium\" data-testid=\"neuro-fact\">\n              Fun Fact: {neuro.funFact}\n            </div>\n          </div>\n        </Card>\n      </div>\n      \n      {/* Math Concept Explanations */}\n      <Card className=\"dashboard-card\">\n        <h3 className=\"subsection-title sky-blue-accent mb-4\">Understanding Today's Math Concept</h3>\n        <div className=\"bg-sky-blue bg-opacity-20 p-4 rounded-lg\">\n          <h4 className=\"font-semibold text-dark-brown mb-2 text-sm\">High School Level</h4>\n          <p className=\"text-sm text-gray-700 leading-relaxed\" data-testid=\"math-detailed-explanation\">\n            {math.detailedExplanation}\n          </p>\n        </div>\n      </Card>\n    </section>\n  );\n}\n","size_bytes":3104},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/breathing-exercise.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Play, Pause } from 'lucide-react';\n\ninterface BreathingExerciseProps {\n  className?: string;\n}\n\nexport function BreathingExercise({ className }: BreathingExerciseProps) {\n  const [isActive, setIsActive] = useState(false);\n  const [phase, setPhase] = useState<'inhale' | 'hold' | 'exhale' | 'pause'>('inhale');\n  const [count, setCount] = useState(6);\n  const [cycle, setCycle] = useState(0);\n\n  const getPhaseDuration = (phase: string) => {\n    switch (phase) {\n      case 'inhale': return 6;\n      case 'hold': return 8;\n      case 'exhale': return 8;\n      case 'pause': return 6;\n      default: return 6;\n    }\n  };\n\n  useEffect(() => {\n    if (!isActive) return;\n\n    const interval = setInterval(() => {\n      setCount((prev) => {\n        if (prev > 1) return prev - 1;\n        \n        // Move to next phase when count reaches 0\n        setPhase((currentPhase) => {\n          let nextPhase: 'inhale' | 'hold' | 'exhale' | 'pause';\n          switch (currentPhase) {\n            case 'inhale':\n              nextPhase = 'hold';\n              break;\n            case 'hold':\n              nextPhase = 'exhale';\n              break;\n            case 'exhale':\n              nextPhase = 'pause';\n              break;\n            case 'pause':\n              setCycle(c => c + 1);\n              nextPhase = 'inhale';\n              break;\n            default:\n              nextPhase = 'inhale';\n          }\n          return nextPhase;\n        });\n        \n        // Return the duration for the next phase when count reaches 0\n        const nextPhase = (() => {\n          switch (phase) {\n            case 'inhale': return 'hold';\n            case 'hold': return 'exhale';\n            case 'exhale': return 'pause';\n            case 'pause': return 'inhale';\n            default: return 'inhale';\n          }\n        })();\n        \n        return getPhaseDuration(nextPhase);\n      });\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, [isActive, phase]);\n\n  const startExercise = () => {\n    setIsActive(true);\n    setPhase('inhale');\n    setCount(6);\n    setCycle(0);\n  };\n\n  const stopExercise = () => {\n    setIsActive(false);\n    setPhase('inhale');\n    setCount(6);\n  };\n\n  const getPhaseText = () => {\n    switch (phase) {\n      case 'inhale': return 'Breathe In';\n      case 'hold': return 'Hold';\n      case 'exhale': return 'Breathe Out';\n      case 'pause': return 'Pause';\n    }\n  };\n\n  const getCircleScale = () => {\n    switch (phase) {\n      case 'inhale': return 'scale-150';\n      case 'hold': return 'scale-150';\n      case 'exhale': return 'scale-100';\n      case 'pause': return 'scale-100';\n    }\n  };\n\n  return (\n    <div className={className}>\n      <div className=\"flex items-center justify-between mb-4\">\n        <h3 className=\"subsection-title sky-blue-accent\">Box Breathing</h3>\n        <Button\n          onClick={isActive ? stopExercise : startExercise}\n          className=\"btn-sky-blue\"\n          data-testid=\"breathing-toggle\"\n        >\n          {isActive ? (\n            <>\n              <Pause className=\"w-4 h-4 mr-2\" />\n              Stop\n            </>\n          ) : (\n            <>\n              <Play className=\"w-4 h-4 mr-2\" />\n              Start 6-8-8-6\n            </>\n          )}\n        </Button>\n      </div>\n      <p className=\"text-gray-600 text-sm mb-4\">\n        Take a moment to center yourself with controlled breathing\n      </p>\n      \n      <div className=\"h-32 bg-light-accent rounded-lg flex flex-col items-center justify-center\">\n        <div \n          className={`w-16 h-16 bg-sky-blue rounded-full transition-transform duration-1000 ease-in-out ${getCircleScale()}`}\n          data-testid=\"breathing-circle\"\n        />\n        {isActive && (\n          <div className=\"mt-4 text-center\">\n            <div className=\"text-lg font-semibold text-dark-brown\" data-testid=\"breathing-phase\">\n              {getPhaseText()}\n            </div>\n            <div className=\"text-2xl font-bold text-sky-blue\" data-testid=\"breathing-count\">\n              {count}\n            </div>\n            {cycle > 0 && (\n              <div className=\"text-sm text-gray-600\" data-testid=\"breathing-cycle\">\n                Cycle {cycle}\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":4383},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}